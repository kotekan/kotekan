// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2191[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12203[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<313>;
	.reg .b16 	%rs<237>;
	.reg .b32 	%r<3738>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<340>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r358, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd25, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r367, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r367, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd26, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r359, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r368, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r369, %r368, %r2;
	add.s32 	%r370, %r369, %r4;
	mul.wide.u32 	%rd33, %r370, 4;
	add.s64 	%rd6, %rd26, %rd33;
	mov.u32 	%r371, 1;
	st.global.u32 	[%rd6], %r371;
	setp.gt.u32 	%p4, %r359, 32767;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r360, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r360, %r359;
	setp.gt.s32 	%p6, %r360, 65535;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r361, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r360, %r359;
	mad.lo.s32 	%r372, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r373, %r372, %r372, 4;
	setp.gt.u32 	%p8, %r373, 89478484;
	setp.gt.u32 	%p9, %r361, 511;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r362, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r362, %r361;
	setp.lt.s32 	%p12, %r362, 1024;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r374, %r362, %r361;
	shr.s32 	%r375, %r5, 31;
	shr.u32 	%r376, %r375, 24;
	add.s32 	%r377, %r5, %r376;
	shr.s32 	%r378, %r377, 8;
	setp.eq.s32 	%p14, %r374, %r378;
	@%p14 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r363, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p15, %r363, 0;
	@%p15 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r365, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r364, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p16, %r364, %r363;
	setp.gt.s32 	%p17, %r364, 48;
	or.pred  	%p18, %p16, %p17;
	setp.lt.s32 	%p19, %r365, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r366, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r366, %r365;
	setp.gt.s32 	%p22, %r366, 128;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r379, %r366, %r365;
	sub.s32 	%r380, %r364, %r363;
	setp.eq.s32 	%p24, %r379, %r380;
	@%p24 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_12;
$L__BB0_195:                            // %pass162
	and.b32  	%r223, %r2, 3;
	shr.u32 	%r224, %r2, 2;
	mul.lo.s32 	%r381, %r223, %r224;
	and.b32  	%r382, %r381, 7;
	cvt.rn.f32.s32 	%f201, %r382;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p25, %f785, 0f40000000;
	setp.gtu.f32 	%p312, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p25 bra 	$L__BB0_207;
// %bb.196:
	@%p312 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_197;
$L__BB0_203:
	mov.b32 	%r226, %f785;
	and.b32  	%r383, %r226, 8388607;
	or.b32  	%r3733, %r383, 1065353216;
	mov.b32 	%f780, %r3733;
	add.s32 	%r384, %r226, -1073741824;
	and.b32  	%r3734, %r384, -8388608;
	setp.eq.s32 	%p32, %r3734, 0;
	@%p32 bra 	$L__BB0_206;
// %bb.204:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_205:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r3734, 192937984;
	add.s32 	%r386, %r3733, %r385;
	mov.b32 	%f213, %r386;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3734, %r3734, %r385;
	mov.b32 	%r3733, %f780;
	setp.ne.s32 	%p33, %r3734, 0;
	setp.ne.s32 	%p34, %r3733, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_205;
$L__BB0_206:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r226, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_207;
$L__BB0_197:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r225, %f172;
	setp.lt.u32 	%p27, %r225, 1073741824;
	@%p27 bra 	$L__BB0_202;
// %bb.198:
	setp.lt.u32 	%p28, %r225, -2147483647;
	@%p28 bra 	$L__BB0_200;
// %bb.199:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p31, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p31;
	bra.uni 	$L__BB0_202;
$L__BB0_200:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p29, %f172, 0f40800000;
	@%p29 bra 	$L__BB0_202;
// %bb.201:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p30, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p30;
$L__BB0_202:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_207:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p37, %f222, 0f7F800000;
	mov.b32 	%r387, %f169;
	and.b32  	%r233, %r387, -2147483648;
	@%p37 bra 	$L__BB0_209;
// %bb.208:
	mov.b32 	%r388, %f781;
	or.b32  	%r389, %r233, %r388;
	mov.b32 	%f781, %r389;
$L__BB0_209:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r236, %r2, 1;
	and.b32  	%r237, %r236, 6;
	or.b32  	%r238, %r237, 1;
	setp.eq.s32 	%p45, %r237, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3632, %r237, %r224;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p45 bra 	$L__BB0_28;
// %bb.13:                              // %L493
	cvt.u16.u32 	%rs1, %r3632;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p46, %f733, 0f40000000;
	@%p46 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p47, %f733, 0f4B800000;
	@%p47 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r7, %f733;
	and.b32  	%r405, %r7, 8388607;
	or.b32  	%r3635, %r405, 1065353216;
	mov.b32 	%f732, %r3635;
	add.s32 	%r406, %r7, -1073741824;
	and.b32  	%r3636, %r406, -8388608;
	setp.eq.s32 	%p53, %r3636, 0;
	@%p53 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i988.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r3636, 192937984;
	add.s32 	%r408, %r3635, %r407;
	mov.b32 	%f267, %r408;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3636, %r3636, %r407;
	mov.b32 	%r3635, %f732;
	setp.ne.s32 	%p54, %r3636, 0;
	setp.ne.s32 	%p55, %r3635, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i990
	setp.gt.u32 	%p57, %r7, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i967
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r6, %f4;
	setp.lt.u32 	%p48, %r6, 1073741824;
	@%p48 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p49, %r6, -2147483647;
	@%p49 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p52, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p52;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p50, %f4, 0f40800000;
	@%p50 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i971
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p51, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p51;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i974
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i993
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p58, %f276, 0f7F800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r409, %f1;
	and.b32  	%r410, %r409, -2147483648;
	mov.b32 	%r411, %f733;
	or.b32  	%r412, %r410, %r411;
	mov.b32 	%f733, %r412;
$L__BB0_27:                             // %__nv_fmodf.exit994
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r413, %f277;
	and.b32  	%r414, %r413, -2147483648;
	or.b32  	%r415, %r414, 1056964608;
	mov.b32 	%f278, %r415;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p59, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p59;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p60, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p60;
	cvt.rzi.s32.f32 	%r416, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r417, %r416, 1;
	setp.eq.b32 	%p61, %r417, 1;
	selp.f32 	%f296, %f294, %f295, %p61;
	selp.f32 	%f297, %f295, %f294, %p61;
	and.b32  	%r418, %r416, 2;
	setp.eq.s32 	%p62, %r418, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p62;
	add.s32 	%r419, %r416, 1;
	and.b32  	%r420, %r419, 2;
	setp.eq.s32 	%p63, %r420, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p63;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p64, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p64;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p65, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p65;
$L__BB0_28:                             // %L527
	setp.gt.u32 	%p66, %r238, 5;
	mul.lo.s32 	%r3633, %r238, %r224;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p66 bra 	$L__BB0_44;
// %bb.29:                              // %L531
	mul.hi.u32 	%r422, %r3633, -1431655765;
	shr.u32 	%r423, %r422, 5;
	mul.lo.s32 	%r424, %r423, 48;
	sub.s32 	%r425, %r3633, %r424;
	cvt.rn.f32.s32 	%f308, %r425;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p67, %f739, 0f40000000;
	@%p67 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p68, %f739, 0f4B800000;
	@%p68 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r15, %f739;
	and.b32  	%r426, %r15, 8388607;
	or.b32  	%r3637, %r426, 1065353216;
	mov.b32 	%f738, %r3637;
	add.s32 	%r427, %r15, -1073741824;
	and.b32  	%r3638, %r427, -8388608;
	setp.eq.s32 	%p74, %r3638, 0;
	@%p74 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1019.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r428, %r3638, 192937984;
	add.s32 	%r429, %r3637, %r428;
	mov.b32 	%f320, %r429;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3638, %r3638, %r428;
	mov.b32 	%r3637, %f738;
	setp.ne.s32 	%p75, %r3638, 0;
	setp.ne.s32 	%p76, %r3637, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1021
	setp.gt.u32 	%p78, %r15, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i998
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r14, %f25;
	setp.lt.u32 	%p69, %r14, 1073741824;
	@%p69 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p70, %r14, -2147483647;
	@%p70 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p73, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p73;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p71, %f25, 0f40800000;
	@%p71 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1002
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p72, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p72;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1005
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1024
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p79, %f329, 0f7F800000;
	@%p79 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r430, %f22;
	and.b32  	%r431, %r430, -2147483648;
	mov.b32 	%r432, %f739;
	or.b32  	%r433, %r431, %r432;
	mov.b32 	%f739, %r433;
$L__BB0_43:                             // %__nv_fmodf.exit1025
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r434, %f330;
	and.b32  	%r435, %r434, -2147483648;
	or.b32  	%r436, %r435, 1056964608;
	mov.b32 	%f331, %r436;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p80, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p80;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p81, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p81;
	cvt.rzi.s32.f32 	%r437, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r438, %r437, 1;
	setp.eq.b32 	%p82, %r438, 1;
	selp.f32 	%f349, %f347, %f348, %p82;
	selp.f32 	%f350, %f348, %f347, %p82;
	and.b32  	%r439, %r437, 2;
	setp.eq.s32 	%p83, %r439, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p83;
	add.s32 	%r440, %r437, 1;
	and.b32  	%r441, %r440, 2;
	setp.eq.s32 	%p84, %r441, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p84;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p85, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p85;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p86, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p86;
$L__BB0_44:                             // %L565
	setp.gt.u32 	%p88, %r2, 23;
	or.pred  	%p1, %p45, %p88;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L603
	cvt.u16.u32 	%rs8, %r3632;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p89, %f745, 0f40000000;
	@%p89 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p90, %f745, 0f4B800000;
	@%p90 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r25, %f745;
	and.b32  	%r449, %r25, 8388607;
	or.b32  	%r3639, %r449, 1065353216;
	mov.b32 	%f744, %r3639;
	add.s32 	%r450, %r25, -1073741824;
	and.b32  	%r3640, %r450, -8388608;
	setp.eq.s32 	%p96, %r3640, 0;
	@%p96 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1050.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r451, %r3640, 192937984;
	add.s32 	%r452, %r3639, %r451;
	mov.b32 	%f373, %r452;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3640, %r3640, %r451;
	mov.b32 	%r3639, %f744;
	setp.ne.s32 	%p97, %r3640, 0;
	setp.ne.s32 	%p98, %r3639, 0;
	and.pred  	%p99, %p97, %p98;
	@%p99 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1052
	setp.gt.u32 	%p100, %r25, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p100;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1029
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r24, %f46;
	setp.lt.u32 	%p91, %r24, 1073741824;
	@%p91 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p92, %r24, -2147483647;
	@%p92 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p95, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p95;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p93, %f46, 0f40800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1033
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p94, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p94;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1036
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1055
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p101, %f382, 0f7F800000;
	@%p101 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r453, %f43;
	and.b32  	%r454, %r453, -2147483648;
	mov.b32 	%r455, %f745;
	or.b32  	%r456, %r454, %r455;
	mov.b32 	%f745, %r456;
$L__BB0_59:                             // %__nv_fmodf.exit1056
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r457, %f383;
	and.b32  	%r458, %r457, -2147483648;
	or.b32  	%r459, %r458, 1056964608;
	mov.b32 	%f384, %r459;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p102, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p102;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p103, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p103;
	cvt.rzi.s32.f32 	%r460, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r461, %r460, 1;
	setp.eq.b32 	%p104, %r461, 1;
	selp.f32 	%f402, %f400, %f401, %p104;
	selp.f32 	%f403, %f401, %f400, %p104;
	and.b32  	%r462, %r460, 2;
	setp.eq.s32 	%p105, %r462, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p105;
	add.s32 	%r463, %r460, 1;
	and.b32  	%r464, %r463, 2;
	setp.eq.s32 	%p106, %r464, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p106;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p107, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p107;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p108, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p108;
$L__BB0_60:                             // %L637
	or.pred  	%p2, %p66, %p88;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L645
	mul.hi.u32 	%r466, %r3633, -1431655765;
	shr.u32 	%r467, %r466, 2;
	mul.lo.s32 	%r468, %r467, 6;
	sub.s32 	%r469, %r3633, %r468;
	cvt.rn.f32.s32 	%f414, %r469;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p111, %f751, 0f40000000;
	@%p111 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p112, %f751, 0f4B800000;
	@%p112 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r33, %f751;
	and.b32  	%r470, %r33, 8388607;
	or.b32  	%r3641, %r470, 1065353216;
	mov.b32 	%f750, %r3641;
	add.s32 	%r471, %r33, -1073741824;
	and.b32  	%r3642, %r471, -8388608;
	setp.eq.s32 	%p118, %r3642, 0;
	@%p118 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1081.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r472, %r3642, 192937984;
	add.s32 	%r473, %r3641, %r472;
	mov.b32 	%f426, %r473;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3642, %r3642, %r472;
	mov.b32 	%r3641, %f750;
	setp.ne.s32 	%p119, %r3642, 0;
	setp.ne.s32 	%p120, %r3641, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1083
	setp.gt.u32 	%p122, %r33, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1060
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r32, %f67;
	setp.lt.u32 	%p113, %r32, 1073741824;
	@%p113 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p114, %r32, -2147483647;
	@%p114 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p117, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p117;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p115, %f67, 0f40800000;
	@%p115 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1064
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p116, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p116;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1067
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1086
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p123, %f435, 0f7F800000;
	@%p123 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r474, %f64;
	and.b32  	%r475, %r474, -2147483648;
	mov.b32 	%r476, %f751;
	or.b32  	%r477, %r475, %r476;
	mov.b32 	%f751, %r477;
$L__BB0_75:                             // %__nv_fmodf.exit1087
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r478, %f436;
	and.b32  	%r479, %r478, -2147483648;
	or.b32  	%r480, %r479, 1056964608;
	mov.b32 	%f437, %r480;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p124, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p124;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p125, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p125;
	cvt.rzi.s32.f32 	%r481, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r482, %r481, 1;
	setp.eq.b32 	%p126, %r482, 1;
	selp.f32 	%f455, %f453, %f454, %p126;
	selp.f32 	%f456, %f454, %f453, %p126;
	and.b32  	%r483, %r481, 2;
	setp.eq.s32 	%p127, %r483, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p127;
	add.s32 	%r484, %r481, 1;
	and.b32  	%r485, %r484, 2;
	setp.eq.s32 	%p128, %r485, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p128;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p129, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p129;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p130, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p130;
$L__BB0_76:                             // %L679
	@%p25 bra 	$L__BB0_217;
// %bb.77:
	@%p312 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_78;
$L__BB0_213:
	mov.b32 	%r240, %f785;
	and.b32  	%r498, %r240, 8388607;
	or.b32  	%r3735, %r498, 1065353216;
	mov.b32 	%f784, %r3735;
	add.s32 	%r499, %r240, -1073741824;
	and.b32  	%r3736, %r499, -8388608;
	setp.eq.s32 	%p138, %r3736, 0;
	@%p138 bra 	$L__BB0_216;
// %bb.214:                             // %__nv_fmaf_rn.exit4.i.i.i1112.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_215:                            // %__nv_fmaf_rn.exit4.i.i.i1112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r500, %r3736, 192937984;
	add.s32 	%r501, %r3735, %r500;
	mov.b32 	%f476, %r501;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3736, %r3736, %r500;
	mov.b32 	%r3735, %f784;
	setp.ne.s32 	%p139, %r3736, 0;
	setp.ne.s32 	%p140, %r3735, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_215;
$L__BB0_216:                            // %__internal_fmodf_slowpath_mod.exit.i.i1114
	setp.gt.u32 	%p142, %r240, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_217;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1091
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r239, %f187;
	setp.lt.u32 	%p133, %r239, 1073741824;
	@%p133 bra 	$L__BB0_212;
// %bb.79:
	setp.lt.u32 	%p134, %r239, -2147483647;
	@%p134 bra 	$L__BB0_210;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p137, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p137;
	bra.uni 	$L__BB0_212;
$L__BB0_210:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p135, %f187, 0f40800000;
	@%p135 bra 	$L__BB0_212;
// %bb.211:                             // %__nv_fmaf_rn.exit.i.i.i1095
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p136, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p136;
$L__BB0_212:                            // %__internal_fmodf_fastpath_quot.exit.i.i1098
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_217:                            // %__internal_fmodf_kernel.exit.i1117
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p143, %f485, 0f7F800000;
	@%p143 bra 	$L__BB0_219;
// %bb.218:
	mov.b32 	%r502, %f785;
	or.b32  	%r503, %r233, %r502;
	mov.b32 	%f785, %r503;
$L__BB0_219:                            // %__nv_fmodf.exit1118
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p45 bra 	$L__BB0_96;
// %bb.81:                              // %L781
	cvt.u16.u32 	%rs15, %r3632;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p152, %f757, 0f40000000;
	@%p152 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p153, %f757, 0f4B800000;
	@%p153 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r45, %f757;
	and.b32  	%r519, %r45, 8388607;
	or.b32  	%r3643, %r519, 1065353216;
	mov.b32 	%f756, %r3643;
	add.s32 	%r520, %r45, -1073741824;
	and.b32  	%r3644, %r520, -8388608;
	setp.eq.s32 	%p159, %r3644, 0;
	@%p159 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1143.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r521, %r3644, 192937984;
	add.s32 	%r522, %r3643, %r521;
	mov.b32 	%f530, %r522;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3644, %r3644, %r521;
	mov.b32 	%r3643, %f756;
	setp.ne.s32 	%p160, %r3644, 0;
	setp.ne.s32 	%p161, %r3643, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1145
	setp.gt.u32 	%p163, %r45, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1122
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r44, %f88;
	setp.lt.u32 	%p154, %r44, 1073741824;
	@%p154 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p155, %r44, -2147483647;
	@%p155 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p158;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1126
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p157;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1148
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p164, %f539, 0f7F800000;
	@%p164 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r523, %f85;
	and.b32  	%r524, %r523, -2147483648;
	mov.b32 	%r525, %f757;
	or.b32  	%r526, %r524, %r525;
	mov.b32 	%f757, %r526;
$L__BB0_95:                             // %__nv_fmodf.exit1149
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r527, %f540;
	and.b32  	%r528, %r527, -2147483648;
	or.b32  	%r529, %r528, 1056964608;
	mov.b32 	%f541, %r529;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p165, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p165;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p166, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p166;
	cvt.rzi.s32.f32 	%r530, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r531, %r530, 1;
	setp.eq.b32 	%p167, %r531, 1;
	selp.f32 	%f559, %f557, %f558, %p167;
	selp.f32 	%f560, %f558, %f557, %p167;
	and.b32  	%r532, %r530, 2;
	setp.eq.s32 	%p168, %r532, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p168;
	add.s32 	%r533, %r530, 1;
	and.b32  	%r534, %r533, 2;
	setp.eq.s32 	%p169, %r534, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p169;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p170, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p170;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p171, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p171;
$L__BB0_96:                             // %L815
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p66 bra 	$L__BB0_112;
// %bb.97:                              // %L819
	mul.hi.u32 	%r536, %r3633, -1431655765;
	shr.u32 	%r537, %r536, 5;
	mul.lo.s32 	%r538, %r537, 48;
	sub.s32 	%r539, %r3633, %r538;
	cvt.rn.f32.s32 	%f571, %r539;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p173, %f763, 0f40000000;
	@%p173 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p174, %f763, 0f4B800000;
	@%p174 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r53, %f763;
	and.b32  	%r540, %r53, 8388607;
	or.b32  	%r3645, %r540, 1065353216;
	mov.b32 	%f762, %r3645;
	add.s32 	%r541, %r53, -1073741824;
	and.b32  	%r3646, %r541, -8388608;
	setp.eq.s32 	%p180, %r3646, 0;
	@%p180 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1174.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r542, %r3646, 192937984;
	add.s32 	%r543, %r3645, %r542;
	mov.b32 	%f583, %r543;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3646, %r3646, %r542;
	mov.b32 	%r3645, %f762;
	setp.ne.s32 	%p181, %r3646, 0;
	setp.ne.s32 	%p182, %r3645, 0;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1176
	setp.gt.u32 	%p184, %r53, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p184;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1153
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r52, %f109;
	setp.lt.u32 	%p175, %r52, 1073741824;
	@%p175 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p176, %r52, -2147483647;
	@%p176 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p179, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p179;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p177, %f109, 0f40800000;
	@%p177 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1157
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p178, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p178;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1160
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1179
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p185, %f592, 0f7F800000;
	@%p185 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r544, %f106;
	and.b32  	%r545, %r544, -2147483648;
	mov.b32 	%r546, %f763;
	or.b32  	%r547, %r545, %r546;
	mov.b32 	%f763, %r547;
$L__BB0_111:                            // %__nv_fmodf.exit1180
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r548, %f593;
	and.b32  	%r549, %r548, -2147483648;
	or.b32  	%r550, %r549, 1056964608;
	mov.b32 	%f594, %r550;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p186, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p186;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p187, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p187;
	cvt.rzi.s32.f32 	%r551, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r552, %r551, 1;
	setp.eq.b32 	%p188, %r552, 1;
	selp.f32 	%f612, %f610, %f611, %p188;
	selp.f32 	%f613, %f611, %f610, %p188;
	and.b32  	%r553, %r551, 2;
	setp.eq.s32 	%p189, %r553, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p189;
	add.s32 	%r554, %r551, 1;
	and.b32  	%r555, %r554, 2;
	setp.eq.s32 	%p190, %r555, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p190;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p191, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p191;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p192, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p192;
$L__BB0_112:                            // %L853
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L891
	cvt.u16.u32 	%rs22, %r3632;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p193, %f769, 0f40000000;
	@%p193 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p194, %f769, 0f4B800000;
	@%p194 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r63, %f769;
	and.b32  	%r563, %r63, 8388607;
	or.b32  	%r3647, %r563, 1065353216;
	mov.b32 	%f768, %r3647;
	add.s32 	%r564, %r63, -1073741824;
	and.b32  	%r3648, %r564, -8388608;
	setp.eq.s32 	%p200, %r3648, 0;
	@%p200 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1205.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r565, %r3648, 192937984;
	add.s32 	%r566, %r3647, %r565;
	mov.b32 	%f636, %r566;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3648, %r3648, %r565;
	mov.b32 	%r3647, %f768;
	setp.ne.s32 	%p201, %r3648, 0;
	setp.ne.s32 	%p202, %r3647, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1207
	setp.gt.u32 	%p204, %r63, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1184
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r62, %f130;
	setp.lt.u32 	%p195, %r62, 1073741824;
	@%p195 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p196, %r62, -2147483647;
	@%p196 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p199, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p199;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p197, %f130, 0f40800000;
	@%p197 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1188
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p198, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p198;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1191
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1210
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p205, %f645, 0f7F800000;
	@%p205 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r567, %f127;
	and.b32  	%r568, %r567, -2147483648;
	mov.b32 	%r569, %f769;
	or.b32  	%r570, %r568, %r569;
	mov.b32 	%f769, %r570;
$L__BB0_127:                            // %__nv_fmodf.exit1211
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r571, %f646;
	and.b32  	%r572, %r571, -2147483648;
	or.b32  	%r573, %r572, 1056964608;
	mov.b32 	%f647, %r573;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p206, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p206;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p207, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p207;
	cvt.rzi.s32.f32 	%r574, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r575, %r574, 1;
	setp.eq.b32 	%p208, %r575, 1;
	selp.f32 	%f665, %f663, %f664, %p208;
	selp.f32 	%f666, %f664, %f663, %p208;
	and.b32  	%r576, %r574, 2;
	setp.eq.s32 	%p209, %r576, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p209;
	add.s32 	%r577, %r574, 1;
	and.b32  	%r578, %r577, 2;
	setp.eq.s32 	%p210, %r578, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p210;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p211, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p211;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p212, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p212;
$L__BB0_128:                            // %L925
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L933
	mul.hi.u32 	%r580, %r3633, -1431655765;
	shr.u32 	%r581, %r580, 2;
	mul.lo.s32 	%r582, %r581, 6;
	sub.s32 	%r583, %r3633, %r582;
	cvt.rn.f32.s32 	%f677, %r583;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p213, %f775, 0f40000000;
	@%p213 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p214, %f775, 0f4B800000;
	@%p214 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r71, %f775;
	and.b32  	%r584, %r71, 8388607;
	or.b32  	%r3649, %r584, 1065353216;
	mov.b32 	%f774, %r3649;
	add.s32 	%r585, %r71, -1073741824;
	and.b32  	%r3650, %r585, -8388608;
	setp.eq.s32 	%p220, %r3650, 0;
	@%p220 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1236.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r586, %r3650, 192937984;
	add.s32 	%r587, %r3649, %r586;
	mov.b32 	%f689, %r587;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3650, %r3650, %r586;
	mov.b32 	%r3649, %f774;
	setp.ne.s32 	%p221, %r3650, 0;
	setp.ne.s32 	%p222, %r3649, 0;
	and.pred  	%p223, %p221, %p222;
	@%p223 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1238
	setp.gt.u32 	%p224, %r71, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p224;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1215
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r70, %f151;
	setp.lt.u32 	%p215, %r70, 1073741824;
	@%p215 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p216, %r70, -2147483647;
	@%p216 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p219, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p219;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p217, %f151, 0f40800000;
	@%p217 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1219
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p218, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p218;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1222
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1241
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p225, %f698, 0f7F800000;
	@%p225 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r588, %f148;
	and.b32  	%r589, %r588, -2147483648;
	mov.b32 	%r590, %f775;
	or.b32  	%r591, %r589, %r590;
	mov.b32 	%f775, %r591;
$L__BB0_143:                            // %__nv_fmodf.exit1242
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r592, %f699;
	and.b32  	%r593, %r592, -2147483648;
	or.b32  	%r594, %r593, 1056964608;
	mov.b32 	%f700, %r594;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p226, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p226;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p227, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p227;
	cvt.rzi.s32.f32 	%r595, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r596, %r595, 1;
	setp.eq.b32 	%p228, %r596, 1;
	selp.f32 	%f718, %f716, %f717, %p228;
	selp.f32 	%f719, %f717, %f716, %p228;
	and.b32  	%r597, %r595, 2;
	setp.eq.s32 	%p229, %r597, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p229;
	add.s32 	%r598, %r595, 1;
	and.b32  	%r599, %r598, 2;
	setp.eq.s32 	%p230, %r599, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p230;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p231, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p231;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p232, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p232;
$L__BB0_144:                            // %L967
	mov.u32 	%r249, 999999999;
	cvt.u16.u32 	%rs235, %r2;
	@%p88 bra 	$L__BB0_221;
// %bb.145:                             // %L1003
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs235, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs235, %rs33;
	cvt.u32.u16 	%r613, %rs34;
	and.b32  	%r614, %r613, 255;
	mad.lo.s32 	%r615, %r614, 24, %r3;
	cvt.u16.u32 	%rs35, %r615;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r616, %rs39;
	mul.wide.u32 	%rd34, %r616, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.u32 	%r617, [%rd35];
	shl.b32 	%r618, %r617, 16;
	cvt.s32.s16 	%r82, %r617;
	shr.s32 	%r83, %r617, 16;
	or.b32  	%r619, %r618, 65535;
	setp.lt.u32 	%p234, %r619, 1638399;
	setp.lt.u32 	%p235, %r617, 1572864;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_146;
$L__BB0_220:                            // %L1245
	mul.lo.s32 	%r623, %r83, 801;
	mad.lo.s32 	%r249, %r82, 33, %r623;
$L__BB0_221:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r396, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r397, %r396, -2147483648;
	mov.b32 	%r510, %f487;
	or.b32  	%r398, %r397, 1056964608;
	and.b32  	%r511, %r510, -2147483648;
	mov.b32 	%f225, %r398;
	or.b32  	%r512, %r511, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r512;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p38, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p38;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p39, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p145, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p39;
	selp.f32 	%f492, %f487, %f490, %p145;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p146, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p146;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r399, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r400, %r399, 1;
	cvt.rzi.s32.f32 	%r513, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p40, %r400, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r514, %r513, 1;
	selp.f32 	%f243, %f241, %f242, %p40;
	and.b32  	%r401, %r399, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p147, %r514, 1;
	setp.eq.s32 	%p41, %r401, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r402, %r399, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p147;
	and.b32  	%r515, %r513, 2;
	selp.f32 	%f244, %f242, %f241, %p40;
	selp.f32 	%f246, %f243, %f245, %p41;
	and.b32  	%r403, %r402, 2;
	setp.eq.f32 	%p43, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p148, %r515, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r516, %r513, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p42, %r403, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p43;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p147;
	selp.f32 	%f509, %f506, %f508, %p148;
	and.b32  	%r517, %r516, 2;
	setp.eq.f32 	%p150, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p42;
	setp.gt.f32 	%p44, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p149, %r517, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p150;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p44;
	selp.f32 	%f511, %f507, %f510, %p149;
	setp.gt.f32 	%p151, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r392, %f254;
	mov.b32 	%r395, %f251;
	selp.f32 	%f517, %f516, %f511, %p151;
	xor.b32  	%r391, %r395, -2147483648;
	mov.b32 	%r487, %f62;
	mov.b32 	%r488, %f83;
	mov.b32 	%r493, %f63;
	mov.b32 	%r494, %f84;
	mov.b32 	%r506, %f517;
	mov.b32 	%r509, %f514;
	mov.b32 	%r443, %f20;
	mov.b32 	%r444, %f41;
	mov.b32 	%r446, %f21;
	mov.b32 	%r447, %f42;
	xor.b32  	%r490, %r493, -2147483648;
	xor.b32  	%r491, %r494, -2147483648;
	xor.b32  	%r505, %r509, -2147483648;
	mov.b32 	%r557, %f104;
	mov.b32 	%r558, %f125;
	mov.b32 	%r560, %f105;
	mov.b32 	%r561, %f126;
	mov.b32 	%r601, %f146;
	mov.b32 	%r602, %f167;
	mov.b32 	%r607, %f147;
	xor.b32  	%r604, %r607, -2147483648;
	mov.b32 	%r608, %f168;
	xor.b32  	%r605, %r608, -2147483648;
	and.b32  	%r624, %r2, 24;
	setp.ne.s32 	%p237, %r624, 24;
	cvt.u16.u32 	%rs236, %r224;
	@%p237 bra 	$L__BB0_147;
// %bb.222:                             // %pass503.L1505_crit_edge
	mul.lo.s16 	%rs46, %rs236, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs236, %rs48;
	cvt.u32.u16 	%r632, %rs49;
	and.b32  	%r3651, %r632, 255;
	mov.u32 	%r86, 0;
	mov.u32 	%r87, %r86;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass540
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	and.b32  	%r625, %r1, 15;
	mul.lo.s32 	%r626, %r625, 1152;
	mul.lo.s16 	%rs41, %rs236, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs236, %rs43;
	cvt.u32.u16 	%r627, %rs44;
	and.b32  	%r3651, %r627, 255;
	or.b32  	%r628, %r626, %r3;
	mad.lo.s32 	%r629, %r223, 144, %r628;
	mad.lo.s32 	%r630, %r3651, 24, %r629;
	mul.wide.u32 	%rd41, %r630, 4;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r86, [%rd42];
	ld.global.u32 	%r87, [%rd42+2304];
$L__BB0_148:                            // %L1505
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r442, %r444, %r443;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r445, %r447, %r446;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r486, %r488, %r487;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r489, %r491, %r490;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r492, %r494, %r493;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r495, %r488, %r487;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r506;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r556, %r558, %r557;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r559, %r561, %r560;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r600, %r602, %r601;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r603, %r605, %r604;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r606, %r608, %r607;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r609, %r602, %r601;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r634, %r2, 2;
	and.b32  	%r635, %r634, 60;
	shl.b32 	%r636, %r2, 3;
	and.b32  	%r88, %r636, 128;
	add.s32 	%r637, %r1, %r363;
	shl.b32 	%r89, %r637, 8;
	or.b32  	%r90, %r635, %r88;
	shl.b32 	%r638, %r363, 8;
	mad.lo.s32 	%r91, %r359, 12288, %r638;
	shl.b32 	%r639, %r1, 8;
	or.b32  	%r640, %r634, %r639;
	or.b32  	%r92, %r640, 64;
	add.s32 	%r93, %r3, 24;
	and.b32  	%r641, %r236, 30;
	shr.u32 	%r642, %r2, 4;
	or.b32  	%r643, %r641, %r642;
	mul.lo.s32 	%r94, %r643, 257;
	or.b32  	%r644, %r642, %r236;
	or.b32  	%r645, %r644, 32;
	mul.lo.s32 	%r95, %r645, 257;
	shr.u32 	%r646, %r3, 3;
	and.b32  	%r647, %r4, 224;
	and.b16  	%rs51, %rs235, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs235, %rs54;
	cvt.u32.u16 	%r648, %rs55;
	and.b32  	%r96, %r648, 255;
	mad.lo.s32 	%r97, %r646, 257, %r647;
	shr.u32 	%r649, %r93, 3;
	mad.lo.s32 	%r98, %r649, 257, %r647;
	add.s32 	%r650, %r3, 48;
	shr.u32 	%r651, %r650, 3;
	mad.lo.s32 	%r99, %r651, 257, %r647;
	add.s32 	%r652, %r3, 72;
	shr.u32 	%r653, %r652, 3;
	mad.lo.s32 	%r100, %r653, 257, %r647;
	or.b32  	%r654, %r646, 12;
	mad.lo.s32 	%r101, %r654, 257, %r647;
	add.s32 	%r655, %r3, 120;
	shr.u32 	%r656, %r655, 3;
	mad.lo.s32 	%r102, %r656, 257, %r647;
	add.s32 	%r657, %r3, 144;
	shr.u32 	%r658, %r657, 3;
	mad.lo.s32 	%r103, %r658, 257, %r647;
	add.s32 	%r659, %r3, 168;
	shr.u32 	%r660, %r659, 3;
	mad.lo.s32 	%r104, %r660, 257, %r647;
	or.b32  	%r661, %r646, 24;
	mad.lo.s32 	%r105, %r661, 257, %r647;
	add.s32 	%r662, %r3, 216;
	shr.u32 	%r663, %r662, 3;
	mad.lo.s32 	%r106, %r663, 257, %r647;
	add.s32 	%r664, %r3, 240;
	shr.u32 	%r665, %r664, 3;
	mad.lo.s32 	%r107, %r665, 257, %r647;
	add.s32 	%r666, %r3, 264;
	shr.u32 	%r667, %r666, 3;
	mad.lo.s32 	%r108, %r667, 257, %r647;
	or.b32  	%r668, %r646, 36;
	mad.lo.s32 	%r109, %r668, 257, %r647;
	add.s32 	%r669, %r3, 312;
	shr.u32 	%r670, %r669, 3;
	mad.lo.s32 	%r110, %r670, 257, %r647;
	add.s32 	%r671, %r3, 336;
	shr.u32 	%r672, %r671, 3;
	mad.lo.s32 	%r111, %r672, 257, %r647;
	add.s32 	%r673, %r3, 360;
	shr.u32 	%r674, %r673, 3;
	mad.lo.s32 	%r112, %r674, 257, %r647;
	or.b32  	%r675, %r646, 48;
	mad.lo.s32 	%r113, %r675, 257, %r647;
	add.s32 	%r676, %r3, 408;
	shr.u32 	%r677, %r676, 3;
	mad.lo.s32 	%r114, %r677, 257, %r647;
	add.s32 	%r678, %r3, 432;
	shr.u32 	%r679, %r678, 3;
	mad.lo.s32 	%r115, %r679, 257, %r647;
	add.s32 	%r680, %r3, 456;
	shr.u32 	%r681, %r680, 3;
	mad.lo.s32 	%r116, %r681, 257, %r647;
	or.b32  	%r682, %r646, 60;
	mad.lo.s32 	%r117, %r682, 257, %r647;
	add.s32 	%r683, %r3, 504;
	bfe.u32 	%r684, %r683, 3, 6;
	mad.lo.s32 	%r118, %r684, 257, %r647;
	mul.lo.s32 	%r685, %r3, 33;
	mad.lo.s32 	%r686, %r223, 4806, %r685;
	mad.lo.s32 	%r687, %r3651, 801, %r686;
	bfe.s32 	%r688, %r3, 3, 1;
	and.b32  	%r689, %r3, 8;
	setp.eq.s32 	%p238, %r689, 0;
	and.b32  	%r690, %r688, 1028;
	mul.lo.s32 	%r691, %r223, 6;
	bfe.s32 	%r692, %r3, 2, 1;
	and.b32  	%r693, %r692, 2056;
	bfe.s32 	%r694, %r3, 1, 1;
	and.b32  	%r695, %r694, 4112;
	and.b32  	%r696, %r3, 1;
	neg.s32 	%r697, %r696;
	and.b32  	%r698, %r697, 8256;
	shr.u32 	%r699, %r3, 4;
	mul.lo.s32 	%r700, %r699, 514;
	add.s32 	%r701, %r700, %r691;
	add.s32 	%r702, %r701, %r690;
	add.s32 	%r703, %r702, %r693;
	add.s32 	%r704, %r703, %r695;
	add.s32 	%r705, %r704, %r698;
	add.s32 	%r706, %r705, %r3651;
	mul.wide.u32 	%rd43, %r706, 4;
	mov.u64 	%rd44, shmem;
	add.s64 	%rd7, %rd44, %rd43;
	selp.b32 	%r707, 1028, 0, %p238;
	bfe.s32 	%r708, %r93, 4, 1;
	and.b32  	%r709, %r708, 514;
	shr.u32 	%r710, %r93, 5;
	mul.lo.s32 	%r711, %r710, 257;
	add.s32 	%r712, %r707, %r691;
	add.s32 	%r713, %r712, %r693;
	add.s32 	%r714, %r713, %r695;
	add.s32 	%r715, %r714, %r698;
	add.s32 	%r716, %r715, %r711;
	add.s32 	%r717, %r716, %r3651;
	add.s32 	%r718, %r717, %r709;
	mul.wide.u32 	%rd45, %r718, 4;
	add.s64 	%rd8, %rd44, %rd45;
	or.b32  	%r719, %r691, 32;
	add.s32 	%r720, %r719, %r700;
	add.s32 	%r721, %r720, %r690;
	add.s32 	%r722, %r721, %r693;
	add.s32 	%r723, %r722, %r695;
	add.s32 	%r724, %r723, %r698;
	add.s32 	%r725, %r724, %r3651;
	mul.wide.u32 	%rd46, %r725, 4;
	add.s64 	%rd9, %rd44, %rd46;
	add.s32 	%r726, %r719, %r707;
	add.s32 	%r727, %r726, %r693;
	add.s32 	%r728, %r727, %r695;
	add.s32 	%r729, %r728, %r698;
	add.s32 	%r730, %r729, %r711;
	add.s32 	%r731, %r730, %r3651;
	add.s32 	%r732, %r731, %r709;
	mul.wide.u32 	%rd47, %r732, 4;
	add.s64 	%rd10, %rd44, %rd47;
	mul.lo.s32 	%r733, %r361, 147456;
	mad.lo.s32 	%r734, %r365, 1152, %r733;
	mul.lo.s32 	%r735, %r1, 1152;
	mad.lo.s32 	%r736, %r3, 24, %r735;
	add.s32 	%r119, %r736, %r96;
	cvt.s64.s32 	%rd11, %r734;
	cvt.u16.u32 	%rs56, %r93;
	and.b16  	%rs57, %rs56, 255;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r737, %rs61;
	and.b32  	%r738, %r737, 255;
	or.b32  	%r739, %r735, %r96;
	mad.lo.s32 	%r120, %r738, 24, %r739;
	mul.wide.u32 	%rd48, %r687, 4;
	add.s64 	%rd12, %rd44, %rd48;
	add.s32 	%r740, %r706, 64;
	mul.wide.u32 	%rd49, %r740, 4;
	add.s64 	%rd13, %rd44, %rd49;
	add.s32 	%r741, %r718, 64;
	mul.wide.u32 	%rd50, %r741, 4;
	add.s64 	%rd14, %rd44, %rd50;
	add.s32 	%r742, %r725, 64;
	mul.wide.u32 	%rd51, %r742, 4;
	add.s64 	%rd15, %rd44, %rd51;
	add.s32 	%r743, %r732, 64;
	mul.wide.u32 	%rd52, %r743, 4;
	add.s64 	%rd16, %rd44, %rd52;
	add.s32 	%r744, %r706, 128;
	mul.wide.u32 	%rd53, %r744, 4;
	add.s64 	%rd17, %rd44, %rd53;
	add.s32 	%r745, %r718, 128;
	mul.wide.u32 	%rd54, %r745, 4;
	add.s64 	%rd18, %rd44, %rd54;
	add.s32 	%r746, %r725, 128;
	mul.wide.u32 	%rd55, %r746, 4;
	add.s64 	%rd19, %rd44, %rd55;
	add.s32 	%r747, %r732, 128;
	mul.wide.u32 	%rd56, %r747, 4;
	add.s64 	%rd20, %rd44, %rd56;
	add.s32 	%r748, %r706, 192;
	mul.wide.u32 	%rd57, %r748, 4;
	add.s64 	%rd21, %rd44, %rd57;
	add.s32 	%r749, %r718, 192;
	mul.wide.u32 	%rd58, %r749, 4;
	add.s64 	%rd22, %rd44, %rd58;
	add.s32 	%r750, %r725, 192;
	mul.wide.u32 	%rd59, %r750, 4;
	add.s64 	%rd23, %rd44, %rd59;
	add.s32 	%r751, %r732, 192;
	mul.wide.u32 	%rd60, %r751, 4;
	add.s64 	%rd24, %rd44, %rd60;
	setp.lt.u32 	%p240, %r2, 16;
	setp.gt.u32 	%p269, %r3, 7;
	setp.lt.u32 	%p273, %r2, 24;
	mov.u32 	%r3684, %r121;
	mov.u32 	%r3685, %r121;
	mov.u32 	%r3686, %r121;
	mov.u32 	%r3687, %r121;
	bra.uni 	$L__BB0_149;
$L__BB0_193:                            // %L25757
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r222, %r121, 48;
	setp.ne.s32 	%p311, %r121, 32688;
	mov.u32 	%r121, %r222;
	@%p311 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_194;
$L__BB0_149:                            // %L1508
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_185 Depth 2
	add.s32 	%r752, %r121, %r359;
	setp.lt.s32 	%p239, %r752, %r360;
	@%p239 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_194;
$L__BB0_150:                            // %oksrem665
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r945, %r121, -1431655765;
	shr.u32 	%r946, %r945, 5;
	mul.lo.s32 	%r254, %r946, 48;
	add.s32 	%r947, %r254, %r3;
	add.s32 	%r948, %r947, %r359;
	mul.lo.s32 	%r949, %r948, 12288;
	or.b32  	%r950, %r90, %r949;
	add.s32 	%r951, %r950, %r89;
	mul.hi.s32 	%r952, %r951, 715827883;
	shr.u32 	%r953, %r952, 31;
	shr.s32 	%r954, %r952, 26;
	add.s32 	%r955, %r954, %r953;
	setp.lt.s32 	%p241, %r951, 0;
	mul.lo.s32 	%r956, %r955, 402653184;
	setp.ne.s32 	%p242, %r956, %r951;
	and.pred  	%p243, %p241, %p242;
	selp.s32 	%r957, -1, 0, %p243;
	add.s32 	%r958, %r955, %r957;
	mad.lo.s32 	%r959, %r958, -402653184, %r951;
	mul.wide.s32 	%rd61, %r959, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r960, %r961, %r962, %r963}, [%rd62];
	mad.lo.s32 	%r964, %r947, 12288, %r92;
	or.b32  	%r965, %r964, %r88;
	add.s32 	%r966, %r91, %r965;
	mul.hi.s32 	%r967, %r966, 715827883;
	shr.u32 	%r968, %r967, 31;
	shr.s32 	%r969, %r967, 26;
	add.s32 	%r970, %r969, %r968;
	shr.s32 	%r971, %r966, 31;
	add.s32 	%r972, %r971, %r970;
	or.b32  	%r973, %r966, 1;
	mad.lo.s32 	%r974, %r972, -402653184, %r973;
	mul.wide.s32 	%rd63, %r974, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r975, %r976, %r977, %r978}, [%rd64+-4];
	add.s32 	%r979, %r93, %r254;
	add.s32 	%r980, %r979, %r359;
	mul.lo.s32 	%r981, %r980, 12288;
	or.b32  	%r982, %r90, %r981;
	add.s32 	%r983, %r982, %r89;
	mul.hi.s32 	%r984, %r983, 715827883;
	shr.u32 	%r985, %r984, 31;
	shr.s32 	%r986, %r984, 26;
	add.s32 	%r987, %r986, %r985;
	setp.lt.s32 	%p244, %r983, 0;
	mul.lo.s32 	%r988, %r987, 402653184;
	setp.ne.s32 	%p245, %r988, %r983;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r989, -1, 0, %p246;
	add.s32 	%r990, %r987, %r989;
	mad.lo.s32 	%r991, %r990, -402653184, %r983;
	mul.wide.s32 	%rd65, %r991, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r992, %r993, %r994, %r995}, [%rd66];
	mad.lo.s32 	%r996, %r979, 12288, %r92;
	or.b32  	%r997, %r996, %r88;
	add.s32 	%r998, %r91, %r997;
	mul.hi.s32 	%r999, %r998, 715827883;
	shr.u32 	%r1000, %r999, 31;
	shr.s32 	%r1001, %r999, 26;
	add.s32 	%r1002, %r1001, %r1000;
	shr.s32 	%r1003, %r998, 31;
	add.s32 	%r1004, %r1003, %r1002;
	or.b32  	%r1005, %r998, 1;
	mad.lo.s32 	%r1006, %r1004, -402653184, %r1005;
	mul.wide.s32 	%rd67, %r1006, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r1007, %r1008, %r1009, %r1010}, [%rd68+-4];
	selp.b32 	%r1011, %r962, %r960, %p240;
	shfl.sync.bfly.b32	%r1012, %r1011, 16, 31, -1;
	selp.b32 	%r755, %r960, %r1012, %p240;
	selp.b32 	%r760, %r1012, %r962, %p240;
	selp.b32 	%r1013, %r963, %r961, %p240;
	shfl.sync.bfly.b32	%r1014, %r1013, 16, 31, -1;
	selp.b32 	%r763, %r961, %r1014, %p240;
	selp.b32 	%r768, %r1014, %r963, %p240;
	selp.b32 	%r1015, %r977, %r975, %p240;
	shfl.sync.bfly.b32	%r1016, %r1015, 16, 31, -1;
	selp.b32 	%r771, %r975, %r1016, %p240;
	selp.b32 	%r776, %r1016, %r977, %p240;
	selp.b32 	%r1017, %r978, %r976, %p240;
	shfl.sync.bfly.b32	%r1018, %r1017, 16, 31, -1;
	selp.b32 	%r779, %r976, %r1018, %p240;
	selp.b32 	%r784, %r1018, %r978, %p240;
	selp.b32 	%r1019, %r994, %r992, %p240;
	shfl.sync.bfly.b32	%r1020, %r1019, 16, 31, -1;
	selp.b32 	%r787, %r992, %r1020, %p240;
	selp.b32 	%r792, %r1020, %r994, %p240;
	selp.b32 	%r1021, %r995, %r993, %p240;
	shfl.sync.bfly.b32	%r1022, %r1021, 16, 31, -1;
	selp.b32 	%r795, %r993, %r1022, %p240;
	selp.b32 	%r800, %r1022, %r995, %p240;
	selp.b32 	%r1023, %r1009, %r1007, %p240;
	shfl.sync.bfly.b32	%r1024, %r1023, 16, 31, -1;
	selp.b32 	%r803, %r1007, %r1024, %p240;
	selp.b32 	%r808, %r1024, %r1009, %p240;
	selp.b32 	%r1025, %r1010, %r1008, %p240;
	shfl.sync.bfly.b32	%r1026, %r1025, 16, 31, -1;
	selp.b32 	%r811, %r1008, %r1026, %p240;
	selp.b32 	%r816, %r1026, %r1010, %p240;
	shl.b32 	%r756, %r760, 4;
	mov.u32 	%r754, 252645135;
	// begin inline asm
	lop3.b32 %r818, %r754, %r755, %r756, 202;
	// end inline asm
	shr.u32 	%r759, %r755, 4;
	// begin inline asm
	lop3.b32 %r834, %r754, %r759, %r760, 202;
	// end inline asm
	shl.b32 	%r764, %r768, 4;
	// begin inline asm
	lop3.b32 %r826, %r754, %r763, %r764, 202;
	// end inline asm
	shr.u32 	%r767, %r763, 4;
	// begin inline asm
	lop3.b32 %r842, %r754, %r767, %r768, 202;
	// end inline asm
	shl.b32 	%r772, %r776, 4;
	// begin inline asm
	lop3.b32 %r850, %r754, %r771, %r772, 202;
	// end inline asm
	shr.u32 	%r775, %r771, 4;
	// begin inline asm
	lop3.b32 %r866, %r754, %r775, %r776, 202;
	// end inline asm
	shl.b32 	%r780, %r784, 4;
	// begin inline asm
	lop3.b32 %r858, %r754, %r779, %r780, 202;
	// end inline asm
	shr.u32 	%r783, %r779, 4;
	// begin inline asm
	lop3.b32 %r874, %r754, %r783, %r784, 202;
	// end inline asm
	shl.b32 	%r788, %r792, 4;
	// begin inline asm
	lop3.b32 %r819, %r754, %r787, %r788, 202;
	// end inline asm
	shr.u32 	%r791, %r787, 4;
	// begin inline asm
	lop3.b32 %r835, %r754, %r791, %r792, 202;
	// end inline asm
	shl.b32 	%r796, %r800, 4;
	// begin inline asm
	lop3.b32 %r827, %r754, %r795, %r796, 202;
	// end inline asm
	shr.u32 	%r799, %r795, 4;
	// begin inline asm
	lop3.b32 %r843, %r754, %r799, %r800, 202;
	// end inline asm
	shl.b32 	%r804, %r808, 4;
	// begin inline asm
	lop3.b32 %r851, %r754, %r803, %r804, 202;
	// end inline asm
	shr.u32 	%r807, %r803, 4;
	// begin inline asm
	lop3.b32 %r867, %r754, %r807, %r808, 202;
	// end inline asm
	shl.b32 	%r812, %r816, 4;
	// begin inline asm
	lop3.b32 %r859, %r754, %r811, %r812, 202;
	// end inline asm
	shr.u32 	%r815, %r811, 4;
	// begin inline asm
	lop3.b32 %r875, %r754, %r815, %r816, 202;
	// end inline asm
	mov.u32 	%r820, 25152;
	// begin inline asm
	prmt.b32 %r882, %r818, %r819, %r820;
	// end inline asm
	mov.u32 	%r824, 29521;
	// begin inline asm
	prmt.b32 %r914, %r818, %r819, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r826, %r827, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r922, %r826, %r827, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r883, %r834, %r835, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r915, %r834, %r835, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r891, %r842, %r843, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r923, %r842, %r843, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r850, %r851, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r930, %r850, %r851, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r858, %r859, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r938, %r858, %r859, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r899, %r866, %r867, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r931, %r866, %r867, %r824;
	// end inline asm
	// begin inline asm
	prmt.b32 %r907, %r874, %r875, %r820;
	// end inline asm
	// begin inline asm
	prmt.b32 %r939, %r874, %r875, %r824;
	// end inline asm
	mov.u32 	%r884, 21520;
	// begin inline asm
	prmt.b32 %r881, %r882, %r883, %r884;
	// end inline asm
	mov.u32 	%r888, 30258;
	// begin inline asm
	prmt.b32 %r885, %r882, %r883, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r890, %r891, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r890, %r891, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r898, %r899, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r898, %r899, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r906, %r907, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r906, %r907, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r914, %r915, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r914, %r915, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r922, %r923, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r922, %r923, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r930, %r931, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r933, %r930, %r931, %r888;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r938, %r939, %r884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r941, %r938, %r939, %r888;
	// end inline asm
	cvt.u16.u32 	%rs62, %r947;
	mul.hi.s16 	%rs63, %rs62, 10923;
	shr.u16 	%rs64, %rs63, 15;
	shr.s16 	%rs65, %rs63, 2;
	add.s16 	%rs66, %rs65, %rs64;
	mul.lo.s16 	%rs67, %rs66, 24;
	sub.s16 	%rs68, %rs62, %rs67;
	cvt.s32.s16 	%r1027, %rs68;
	add.s32 	%r1028, %r94, %r1027;
	mul.wide.s32 	%rd69, %r1028, 4;
	add.s64 	%rd71, %rd44, %rd69;
	st.shared.u32 	[%rd71], %r881;
	add.s32 	%r1029, %r1028, 128;
	mul.wide.u32 	%rd72, %r1029, 4;
	add.s64 	%rd73, %rd44, %rd72;
	st.shared.u32 	[%rd73], %r889;
	add.s32 	%r1030, %r1028, 64;
	mul.wide.u32 	%rd74, %r1030, 4;
	add.s64 	%rd75, %rd44, %rd74;
	st.shared.u32 	[%rd75], %r885;
	add.s32 	%r1031, %r1028, 192;
	mul.wide.u32 	%rd76, %r1031, 4;
	add.s64 	%rd77, %rd44, %rd76;
	st.shared.u32 	[%rd77], %r893;
	add.s32 	%r1032, %r95, %r1027;
	mul.wide.u32 	%rd78, %r1032, 4;
	add.s64 	%rd79, %rd44, %rd78;
	st.shared.u32 	[%rd79], %r897;
	add.s32 	%r1033, %r1032, 128;
	mul.wide.u32 	%rd80, %r1033, 4;
	add.s64 	%rd81, %rd44, %rd80;
	st.shared.u32 	[%rd81], %r905;
	add.s32 	%r1034, %r1032, 64;
	mul.wide.u32 	%rd82, %r1034, 4;
	add.s64 	%rd83, %rd44, %rd82;
	st.shared.u32 	[%rd83], %r901;
	add.s32 	%r1035, %r1032, 192;
	mul.wide.u32 	%rd84, %r1035, 4;
	add.s64 	%rd85, %rd44, %rd84;
	st.shared.u32 	[%rd85], %r909;
	add.s32 	%r1036, %r1028, 32;
	mul.wide.u32 	%rd86, %r1036, 4;
	add.s64 	%rd87, %rd44, %rd86;
	st.shared.u32 	[%rd87], %r913;
	add.s32 	%r1037, %r1028, 160;
	mul.wide.u32 	%rd88, %r1037, 4;
	add.s64 	%rd89, %rd44, %rd88;
	st.shared.u32 	[%rd89], %r921;
	add.s32 	%r1038, %r1028, 96;
	mul.wide.u32 	%rd90, %r1038, 4;
	add.s64 	%rd91, %rd44, %rd90;
	st.shared.u32 	[%rd91], %r917;
	add.s32 	%r1039, %r1028, 224;
	mul.wide.u32 	%rd92, %r1039, 4;
	add.s64 	%rd93, %rd44, %rd92;
	st.shared.u32 	[%rd93], %r925;
	add.s32 	%r1040, %r1032, 32;
	mul.wide.u32 	%rd94, %r1040, 4;
	add.s64 	%rd95, %rd44, %rd94;
	st.shared.u32 	[%rd95], %r929;
	add.s32 	%r1041, %r1032, 160;
	mul.wide.u32 	%rd96, %r1041, 4;
	add.s64 	%rd97, %rd44, %rd96;
	st.shared.u32 	[%rd97], %r937;
	add.s32 	%r1042, %r1032, 96;
	mul.wide.u32 	%rd98, %r1042, 4;
	add.s64 	%rd99, %rd44, %rd98;
	st.shared.u32 	[%rd99], %r933;
	add.s32 	%r1043, %r1032, 224;
	mul.wide.u32 	%rd100, %r1043, 4;
	add.s64 	%rd101, %rd44, %rd100;
	st.shared.u32 	[%rd101], %r941;
	bar.sync 	0;
	add.s32 	%r1044, %r254, %r96;
	cvt.u16.u32 	%rs69, %r1044;
	mul.hi.s16 	%rs70, %rs69, 10923;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 2;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 24;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.s32.s16 	%r255, %rs75;
	add.s32 	%r1045, %r97, %r255;
	mul.wide.s32 	%rd102, %r1045, 4;
	add.s64 	%rd103, %rd44, %rd102;
	ld.shared.u32 	%r256, [%rd103];
	add.s32 	%r1046, %r98, %r255;
	mul.wide.u32 	%rd104, %r1046, 4;
	add.s64 	%rd105, %rd44, %rd104;
	ld.shared.u32 	%r257, [%rd105];
	add.s32 	%r1047, %r99, %r255;
	mul.wide.u32 	%rd106, %r1047, 4;
	add.s64 	%rd107, %rd44, %rd106;
	ld.shared.u32 	%r258, [%rd107];
	add.s32 	%r1048, %r100, %r255;
	mul.wide.u32 	%rd108, %r1048, 4;
	add.s64 	%rd109, %rd44, %rd108;
	ld.shared.u32 	%r259, [%rd109];
	add.s32 	%r1049, %r101, %r255;
	mul.wide.u32 	%rd110, %r1049, 4;
	add.s64 	%rd111, %rd44, %rd110;
	ld.shared.u32 	%r260, [%rd111];
	add.s32 	%r1050, %r102, %r255;
	mul.wide.u32 	%rd112, %r1050, 4;
	add.s64 	%rd113, %rd44, %rd112;
	ld.shared.u32 	%r261, [%rd113];
	add.s32 	%r1051, %r103, %r255;
	mul.wide.u32 	%rd114, %r1051, 4;
	add.s64 	%rd115, %rd44, %rd114;
	ld.shared.u32 	%r262, [%rd115];
	add.s32 	%r1052, %r104, %r255;
	mul.wide.u32 	%rd116, %r1052, 4;
	add.s64 	%rd117, %rd44, %rd116;
	ld.shared.u32 	%r263, [%rd117];
	add.s32 	%r1053, %r105, %r255;
	mul.wide.u32 	%rd118, %r1053, 4;
	add.s64 	%rd119, %rd44, %rd118;
	ld.shared.u32 	%r264, [%rd119];
	add.s32 	%r1054, %r106, %r255;
	mul.wide.u32 	%rd120, %r1054, 4;
	add.s64 	%rd121, %rd44, %rd120;
	ld.shared.u32 	%r265, [%rd121];
	add.s32 	%r1055, %r107, %r255;
	mul.wide.u32 	%rd122, %r1055, 4;
	add.s64 	%rd123, %rd44, %rd122;
	ld.shared.u32 	%r266, [%rd123];
	add.s32 	%r1056, %r108, %r255;
	mul.wide.u32 	%rd124, %r1056, 4;
	add.s64 	%rd125, %rd44, %rd124;
	ld.shared.u32 	%r267, [%rd125];
	add.s32 	%r1057, %r109, %r255;
	mul.wide.u32 	%rd126, %r1057, 4;
	add.s64 	%rd127, %rd44, %rd126;
	ld.shared.u32 	%r268, [%rd127];
	add.s32 	%r1058, %r110, %r255;
	mul.wide.u32 	%rd128, %r1058, 4;
	add.s64 	%rd129, %rd44, %rd128;
	ld.shared.u32 	%r269, [%rd129];
	add.s32 	%r1059, %r111, %r255;
	mul.wide.u32 	%rd130, %r1059, 4;
	add.s64 	%rd131, %rd44, %rd130;
	ld.shared.u32 	%r270, [%rd131];
	add.s32 	%r1060, %r112, %r255;
	mul.wide.u32 	%rd132, %r1060, 4;
	add.s64 	%rd133, %rd44, %rd132;
	ld.shared.u32 	%r271, [%rd133];
	add.s32 	%r1061, %r113, %r255;
	mul.wide.u32 	%rd134, %r1061, 4;
	add.s64 	%rd135, %rd44, %rd134;
	ld.shared.u32 	%r272, [%rd135];
	add.s32 	%r1062, %r114, %r255;
	mul.wide.u32 	%rd136, %r1062, 4;
	add.s64 	%rd137, %rd44, %rd136;
	ld.shared.u32 	%r273, [%rd137];
	add.s32 	%r1063, %r115, %r255;
	mul.wide.u32 	%rd138, %r1063, 4;
	add.s64 	%rd139, %rd44, %rd138;
	ld.shared.u32 	%r274, [%rd139];
	add.s32 	%r1064, %r116, %r255;
	mul.wide.u32 	%rd140, %r1064, 4;
	add.s64 	%rd141, %rd44, %rd140;
	ld.shared.u32 	%r275, [%rd141];
	add.s32 	%r1065, %r117, %r255;
	mul.wide.u32 	%rd142, %r1065, 4;
	add.s64 	%rd143, %rd44, %rd142;
	ld.shared.u32 	%r276, [%rd143];
	add.s32 	%r1066, %r118, %r255;
	mul.wide.s32 	%rd144, %r1066, 4;
	add.s64 	%rd145, %rd44, %rd144;
	ld.shared.u32 	%r277, [%rd145];
	bar.sync 	0;
	shfl.sync.idx.b32	%r278, %r249, 0, 31, -1;
	shfl.sync.idx.b32	%r279, %r249, 1, 31, -1;
	shfl.sync.idx.b32	%r280, %r249, 2, 31, -1;
	shfl.sync.idx.b32	%r281, %r249, 3, 31, -1;
	shfl.sync.idx.b32	%r282, %r249, 4, 31, -1;
	shfl.sync.idx.b32	%r283, %r249, 5, 31, -1;
	shfl.sync.idx.b32	%r284, %r249, 6, 31, -1;
	shfl.sync.idx.b32	%r285, %r249, 7, 31, -1;
	shfl.sync.idx.b32	%r286, %r249, 8, 31, -1;
	shfl.sync.idx.b32	%r287, %r249, 9, 31, -1;
	shfl.sync.idx.b32	%r288, %r249, 10, 31, -1;
	shfl.sync.idx.b32	%r289, %r249, 11, 31, -1;
	shfl.sync.idx.b32	%r290, %r249, 12, 31, -1;
	shfl.sync.idx.b32	%r291, %r249, 13, 31, -1;
	shfl.sync.idx.b32	%r292, %r249, 14, 31, -1;
	shfl.sync.idx.b32	%r293, %r249, 15, 31, -1;
	shfl.sync.idx.b32	%r294, %r249, 16, 31, -1;
	shfl.sync.idx.b32	%r295, %r249, 17, 31, -1;
	shfl.sync.idx.b32	%r296, %r249, 18, 31, -1;
	shfl.sync.idx.b32	%r297, %r249, 19, 31, -1;
	shfl.sync.idx.b32	%r298, %r249, 20, 31, -1;
	shfl.sync.idx.b32	%r299, %r249, 21, 31, -1;
	shfl.sync.idx.b32	%r300, %r249, 22, 31, -1;
	shfl.sync.idx.b32	%r301, %r249, 23, 31, -1;
	setp.eq.s32 	%p247, %r278, 999999999;
	@%p247 bra 	$L__BB0_151;
// %bb.223:                             // %oksrem3326
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1067, %r278, %r255;
	mul.wide.s32 	%rd146, %r1067, 4;
	add.s64 	%rd148, %rd44, %rd146;
	st.shared.u32 	[%rd148], %r256;
	setp.eq.s32 	%p248, %r279, 999999999;
	@%p248 bra 	$L__BB0_152;
// %bb.224:                             // %oksrem3394
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1068, %r279, %r255;
	mul.wide.s32 	%rd149, %r1068, 4;
	add.s64 	%rd151, %rd44, %rd149;
	st.shared.u32 	[%rd151], %r257;
	setp.eq.s32 	%p249, %r280, 999999999;
	@%p249 bra 	$L__BB0_153;
// %bb.225:                             // %oksrem3462
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1069, %r280, %r255;
	mul.wide.s32 	%rd152, %r1069, 4;
	add.s64 	%rd154, %rd44, %rd152;
	st.shared.u32 	[%rd154], %r258;
	setp.eq.s32 	%p250, %r281, 999999999;
	@%p250 bra 	$L__BB0_154;
// %bb.226:                             // %oksrem3530
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1070, %r281, %r255;
	mul.wide.s32 	%rd155, %r1070, 4;
	add.s64 	%rd157, %rd44, %rd155;
	st.shared.u32 	[%rd157], %r259;
	setp.eq.s32 	%p251, %r282, 999999999;
	@%p251 bra 	$L__BB0_155;
// %bb.227:                             // %oksrem3598
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1071, %r282, %r255;
	mul.wide.s32 	%rd158, %r1071, 4;
	add.s64 	%rd160, %rd44, %rd158;
	st.shared.u32 	[%rd160], %r260;
	setp.eq.s32 	%p252, %r283, 999999999;
	@%p252 bra 	$L__BB0_156;
// %bb.228:                             // %oksrem3666
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1072, %r283, %r255;
	mul.wide.s32 	%rd161, %r1072, 4;
	add.s64 	%rd163, %rd44, %rd161;
	st.shared.u32 	[%rd163], %r261;
	setp.eq.s32 	%p253, %r284, 999999999;
	@%p253 bra 	$L__BB0_157;
// %bb.229:                             // %oksrem3734
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1073, %r284, %r255;
	mul.wide.s32 	%rd164, %r1073, 4;
	add.s64 	%rd166, %rd44, %rd164;
	st.shared.u32 	[%rd166], %r262;
	setp.eq.s32 	%p254, %r285, 999999999;
	@%p254 bra 	$L__BB0_158;
// %bb.230:                             // %oksrem3802
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1074, %r285, %r255;
	mul.wide.s32 	%rd167, %r1074, 4;
	add.s64 	%rd169, %rd44, %rd167;
	st.shared.u32 	[%rd169], %r263;
	setp.eq.s32 	%p255, %r286, 999999999;
	@%p255 bra 	$L__BB0_159;
// %bb.231:                             // %oksrem3870
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1075, %r286, %r255;
	mul.wide.s32 	%rd170, %r1075, 4;
	add.s64 	%rd172, %rd44, %rd170;
	st.shared.u32 	[%rd172], %r264;
	setp.eq.s32 	%p256, %r287, 999999999;
	@%p256 bra 	$L__BB0_160;
// %bb.232:                             // %oksrem3938
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1076, %r287, %r255;
	mul.wide.s32 	%rd173, %r1076, 4;
	add.s64 	%rd175, %rd44, %rd173;
	st.shared.u32 	[%rd175], %r265;
	setp.eq.s32 	%p257, %r288, 999999999;
	@%p257 bra 	$L__BB0_161;
// %bb.233:                             // %oksrem4006
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1077, %r288, %r255;
	mul.wide.s32 	%rd176, %r1077, 4;
	add.s64 	%rd178, %rd44, %rd176;
	st.shared.u32 	[%rd178], %r266;
	setp.eq.s32 	%p258, %r289, 999999999;
	@%p258 bra 	$L__BB0_162;
// %bb.234:                             // %oksrem4074
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1078, %r289, %r255;
	mul.wide.s32 	%rd179, %r1078, 4;
	add.s64 	%rd181, %rd44, %rd179;
	st.shared.u32 	[%rd181], %r267;
	setp.eq.s32 	%p259, %r290, 999999999;
	@%p259 bra 	$L__BB0_163;
// %bb.235:                             // %oksrem4142
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1079, %r290, %r255;
	mul.wide.s32 	%rd182, %r1079, 4;
	add.s64 	%rd184, %rd44, %rd182;
	st.shared.u32 	[%rd184], %r268;
	setp.eq.s32 	%p260, %r291, 999999999;
	@%p260 bra 	$L__BB0_164;
// %bb.236:                             // %oksrem4210
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1080, %r291, %r255;
	mul.wide.s32 	%rd185, %r1080, 4;
	add.s64 	%rd187, %rd44, %rd185;
	st.shared.u32 	[%rd187], %r269;
	setp.eq.s32 	%p261, %r292, 999999999;
	@%p261 bra 	$L__BB0_165;
// %bb.237:                             // %oksrem4278
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1081, %r292, %r255;
	mul.wide.s32 	%rd188, %r1081, 4;
	add.s64 	%rd190, %rd44, %rd188;
	st.shared.u32 	[%rd190], %r270;
	setp.eq.s32 	%p262, %r293, 999999999;
	@%p262 bra 	$L__BB0_166;
// %bb.238:                             // %oksrem4346
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1082, %r293, %r255;
	mul.wide.s32 	%rd191, %r1082, 4;
	add.s64 	%rd193, %rd44, %rd191;
	st.shared.u32 	[%rd193], %r271;
	setp.eq.s32 	%p263, %r294, 999999999;
	@%p263 bra 	$L__BB0_167;
// %bb.239:                             // %oksrem4414
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1083, %r294, %r255;
	mul.wide.s32 	%rd194, %r1083, 4;
	add.s64 	%rd196, %rd44, %rd194;
	st.shared.u32 	[%rd196], %r272;
	setp.eq.s32 	%p264, %r295, 999999999;
	@%p264 bra 	$L__BB0_168;
// %bb.240:                             // %oksrem4482
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1084, %r295, %r255;
	mul.wide.s32 	%rd197, %r1084, 4;
	add.s64 	%rd199, %rd44, %rd197;
	st.shared.u32 	[%rd199], %r273;
	setp.eq.s32 	%p265, %r296, 999999999;
	@%p265 bra 	$L__BB0_169;
// %bb.241:                             // %oksrem4550
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1085, %r296, %r255;
	mul.wide.s32 	%rd200, %r1085, 4;
	add.s64 	%rd202, %rd44, %rd200;
	st.shared.u32 	[%rd202], %r274;
	setp.eq.s32 	%p266, %r297, 999999999;
	@%p266 bra 	$L__BB0_170;
// %bb.242:                             // %oksrem4618
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1086, %r297, %r255;
	mul.wide.s32 	%rd203, %r1086, 4;
	add.s64 	%rd205, %rd44, %rd203;
	st.shared.u32 	[%rd205], %r275;
	setp.eq.s32 	%p267, %r298, 999999999;
	@%p267 bra 	$L__BB0_171;
// %bb.243:                             // %oksrem4686
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1087, %r298, %r255;
	mul.wide.s32 	%rd206, %r1087, 4;
	add.s64 	%rd208, %rd44, %rd206;
	st.shared.u32 	[%rd208], %r276;
	setp.eq.s32 	%p268, %r299, 999999999;
	@%p268 bra 	$L__BB0_172;
// %bb.244:                             // %oksrem4755
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1088, 0, %r277, %p269;
	add.s32 	%r1089, %r299, %r255;
	mul.wide.s32 	%rd209, %r1089, 4;
	add.s64 	%rd211, %rd44, %rd209;
	st.shared.u32 	[%rd211], %r1088;
	setp.eq.s32 	%p270, %r300, 999999999;
	@%p270 bra 	$L__BB0_173;
// %bb.245:                             // %oksrem4823
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1090, %r300, %r255;
	mul.wide.s32 	%rd212, %r1090, 4;
	add.s64 	%rd214, %rd44, %rd212;
	mov.u32 	%r3659, 0;
	st.shared.u32 	[%rd214], %r3659;
	setp.eq.s32 	%p271, %r301, 999999999;
	@%p271 bra 	$L__BB0_174;
// %bb.246:                             // %oksrem4890
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1093, %r301, %r255;
	mul.wide.s32 	%rd215, %r1093, 4;
	add.s64 	%rd217, %rd44, %rd215;
	st.shared.u32 	[%rd217], %r3659;
	bar.sync 	0;
	mov.u32 	%r3660, %r3659;
	mov.u32 	%r3661, %r3659;
	mov.u32 	%r3662, %r3659;
	mov.u32 	%r3663, %r3659;
	mov.u32 	%r3664, %r3659;
	mov.u32 	%r3665, %r3659;
	mov.u32 	%r3666, %r3659;
	mov.u32 	%r3667, %r3659;
	mov.u32 	%r3668, %r3659;
	mov.u32 	%r3669, %r3659;
	mov.u32 	%r3670, %r3659;
	mov.u32 	%r3671, %r3659;
	mov.u32 	%r3672, %r3659;
	mov.u32 	%r3673, %r3659;
	mov.u32 	%r3674, %r3659;
	mov.u32 	%r3675, %r3659;
	mov.u32 	%r3676, %r3659;
	mov.u32 	%r3677, %r3659;
	mov.u32 	%r3678, %r3659;
	mov.u32 	%r3679, %r3659;
	mov.u32 	%r3680, %r3659;
	mov.u32 	%r3681, %r3659;
	mov.u32 	%r3682, %r3659;
	@%p88 bra 	$L__BB0_175;
// %bb.247:                             // %oksrem4970
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs76, %r254;
	mul.hi.s16 	%rs77, %rs76, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.s32.s16 	%r1094, %rs82;
	mul.wide.s32 	%rd218, %r1094, 4;
	add.s64 	%rd219, %rd12, %rd218;
	ld.shared.u32 	%r3659, [%rd219];
	ld.shared.u32 	%r3660, [%rd12+4];
	ld.shared.u32 	%r3661, [%rd12+8];
	ld.shared.u32 	%r3662, [%rd12+12];
	ld.shared.u32 	%r3663, [%rd12+16];
	ld.shared.u32 	%r3664, [%rd12+20];
	ld.shared.u32 	%r3665, [%rd12+24];
	ld.shared.u32 	%r3666, [%rd12+28];
	ld.shared.u32 	%r3667, [%rd12+32];
	ld.shared.u32 	%r3668, [%rd12+36];
	ld.shared.u32 	%r3669, [%rd12+40];
	ld.shared.u32 	%r3670, [%rd12+44];
	ld.shared.u32 	%r3671, [%rd12+48];
	ld.shared.u32 	%r3672, [%rd12+52];
	ld.shared.u32 	%r3673, [%rd12+56];
	ld.shared.u32 	%r3674, [%rd12+60];
	add.s16 	%rs83, %rs76, 16;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r1095, %rs89;
	mul.wide.s32 	%rd220, %r1095, 4;
	add.s64 	%rd221, %rd12, %rd220;
	ld.shared.u32 	%r3675, [%rd221];
	add.s16 	%rs90, %rs76, 17;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r1096, %rs96;
	mul.wide.s32 	%rd222, %r1096, 4;
	add.s64 	%rd223, %rd12, %rd222;
	ld.shared.u32 	%r3676, [%rd223];
	add.s16 	%rs97, %rs76, 18;
	mul.hi.s16 	%rs98, %rs97, 10923;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 2;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs97, %rs102;
	cvt.s32.s16 	%r1097, %rs103;
	mul.wide.s32 	%rd224, %r1097, 4;
	add.s64 	%rd225, %rd12, %rd224;
	ld.shared.u32 	%r3677, [%rd225];
	add.s16 	%rs104, %rs76, 19;
	mul.hi.s16 	%rs105, %rs104, 10923;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 2;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs104, %rs109;
	cvt.s32.s16 	%r1098, %rs110;
	mul.wide.s32 	%rd226, %r1098, 4;
	add.s64 	%rd227, %rd12, %rd226;
	ld.shared.u32 	%r3678, [%rd227];
	add.s16 	%rs111, %rs76, 20;
	mul.hi.s16 	%rs112, %rs111, 10923;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 2;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs111, %rs116;
	cvt.s32.s16 	%r1099, %rs117;
	mul.wide.s32 	%rd228, %r1099, 4;
	add.s64 	%rd229, %rd12, %rd228;
	ld.shared.u32 	%r3679, [%rd229];
	add.s16 	%rs118, %rs76, 21;
	mul.hi.s16 	%rs119, %rs118, 10923;
	shr.u16 	%rs120, %rs119, 15;
	shr.s16 	%rs121, %rs119, 2;
	add.s16 	%rs122, %rs121, %rs120;
	mul.lo.s16 	%rs123, %rs122, 24;
	sub.s16 	%rs124, %rs118, %rs123;
	cvt.s32.s16 	%r1100, %rs124;
	mul.wide.s32 	%rd230, %r1100, 4;
	add.s64 	%rd231, %rd12, %rd230;
	ld.shared.u32 	%r3680, [%rd231];
	add.s16 	%rs125, %rs76, 22;
	mul.hi.s16 	%rs126, %rs125, 10923;
	shr.u16 	%rs127, %rs126, 15;
	shr.s16 	%rs128, %rs126, 2;
	add.s16 	%rs129, %rs128, %rs127;
	mul.lo.s16 	%rs130, %rs129, 24;
	sub.s16 	%rs131, %rs125, %rs130;
	cvt.s32.s16 	%r1101, %rs131;
	mul.wide.s32 	%rd232, %r1101, 4;
	add.s64 	%rd233, %rd12, %rd232;
	ld.shared.u32 	%r3681, [%rd233];
	add.s16 	%rs132, %rs76, 23;
	mul.hi.s16 	%rs133, %rs132, 10923;
	shr.u16 	%rs134, %rs133, 15;
	shr.s16 	%rs135, %rs133, 2;
	add.s16 	%rs136, %rs135, %rs134;
	mul.lo.s16 	%rs137, %rs136, 24;
	sub.s16 	%rs138, %rs132, %rs137;
	cvt.s32.s16 	%r1102, %rs138;
	mul.wide.s32 	%rd234, %r1102, 4;
	add.s64 	%rd235, %rd12, %rd234;
	ld.shared.u32 	%r3682, [%rd235];
$L__BB0_175:                            // %L14042
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mov.u32 	%r3683, 12;
	bra.uni 	$L__BB0_176;
$L__BB0_182:                            // %L19890
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r3685, %r3685, 1;
	mov.u32 	%r3684, 0;
	mov.u32 	%r3686, %r3684;
	mov.u32 	%r3687, %r3684;
$L__BB0_183:                            // %L19891
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3683, %r3683, -4;
	setp.ne.s32 	%p291, %r3683, -12;
	@%p291 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_184;
$L__BB0_176:                            // %L14068
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p274, %r3683, 12;
	selp.b32 	%r1641, %r3659, 0, %p274;
	setp.eq.s32 	%p275, %r3683, 8;
	selp.b32 	%r1642, %r3663, %r1641, %p275;
	setp.eq.s32 	%p276, %r3683, 4;
	selp.b32 	%r1643, %r3667, %r1642, %p276;
	setp.eq.s32 	%p277, %r3683, 0;
	selp.b32 	%r1644, %r3671, %r1643, %p277;
	setp.eq.s32 	%p278, %r3683, -4;
	selp.b32 	%r1645, %r3675, %r1644, %p278;
	setp.eq.s32 	%p279, %r3683, -8;
	selp.b32 	%r1646, %r3679, %r1645, %p279;
	selp.b32 	%r1647, %r3660, 0, %p274;
	selp.b32 	%r1648, %r3664, %r1647, %p275;
	selp.b32 	%r1649, %r3668, %r1648, %p276;
	selp.b32 	%r1650, %r3672, %r1649, %p277;
	selp.b32 	%r1651, %r3676, %r1650, %p278;
	selp.b32 	%r1652, %r3680, %r1651, %p279;
	selp.b32 	%r1653, %r3661, 0, %p274;
	selp.b32 	%r1654, %r3665, %r1653, %p275;
	selp.b32 	%r1655, %r3669, %r1654, %p276;
	selp.b32 	%r1656, %r3673, %r1655, %p277;
	selp.b32 	%r1657, %r3677, %r1656, %p278;
	selp.b32 	%r1658, %r3681, %r1657, %p279;
	selp.b32 	%r1659, %r3662, 0, %p274;
	selp.b32 	%r1660, %r3666, %r1659, %p275;
	selp.b32 	%r1661, %r3670, %r1660, %p276;
	selp.b32 	%r1662, %r3674, %r1661, %p277;
	selp.b32 	%r1663, %r3678, %r1662, %p278;
	selp.b32 	%r1664, %r3682, %r1663, %p279;
	mov.u16 	%rs176, 25600;
	// begin inline asm
	mov.b32 %r1109, {%rs176, %rs176};
	// end inline asm
	mov.u16 	%rs178, 21504;
	// begin inline asm
	mov.b32 %r1120, {%rs178, %rs178};
	// end inline asm
	xor.b32  	%r1108, %r1646, -2004318072;
	mov.u32 	%r1245, 983055;
	// begin inline asm
	lop3.b32 %r1106, %r1245, %r1108, %r1109, 202;
	// end inline asm
	mov.u16 	%rs182, 18432;
	// begin inline asm
	mov.b32 %r1110, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1111, %r1109, %r1110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1114, %r1106, %r1111;
	// end inline asm
	mov.u32 	%r1256, 15728880;
	// begin inline asm
	lop3.b32 %r1117, %r1256, %r1108, %r1120, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1121, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1122, %r1120, %r1121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1125, %r1117, %r1122;
	// end inline asm
	// begin inline asm
	mov.b32 %r1155, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs178, %rs178};
	// end inline asm
	xor.b32  	%r1154, %r1652, -2004318072;
	// begin inline asm
	lop3.b32 %r1152, %r1245, %r1154, %r1155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1157, %r1155, %r1156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1160, %r1152, %r1157;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1163, %r1256, %r1154, %r1166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1166, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs178, %rs178};
	// end inline asm
	xor.b32  	%r1200, %r1658, -2004318072;
	// begin inline asm
	lop3.b32 %r1198, %r1245, %r1200, %r1201, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1202, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1203, %r1201, %r1202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1206, %r1198, %r1203;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1209, %r1256, %r1200, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1212, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs178, %rs178};
	// end inline asm
	xor.b32  	%r1246, %r1664, -2004318072;
	// begin inline asm
	lop3.b32 %r1244, %r1245, %r1246, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1249, %r1247, %r1248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1252, %r1244, %r1249;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1255, %r1256, %r1246, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1258, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1114;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1288, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1125;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1291, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1160;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1294, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1171;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1297, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1206;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1300, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1217;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1303, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r1252;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1306, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r1263;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1309, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1640, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1375, %r1372}, {%r390, %r393}, {%r1288}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1384, %r1381}, {%r390, %r393}, {%r1291}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1393, %r1390}, {%r390, %r393}, {%r1294}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1402, %r1399}, {%r390, %r393}, {%r1297}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1411, %r1408}, {%r390, %r393}, {%r1300}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1420, %r1417}, {%r390, %r393}, {%r1303}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1429, %r1426}, {%r390, %r393}, {%r1306}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1438, %r1435}, {%r390, %r393}, {%r1309}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r1368, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r442, %r1375, %r1370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r1377, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r442, %r1384, %r1379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r1386, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r442, %r1393, %r1388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r1395, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r442, %r1402, %r1397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1406, %r1404, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r442, %r1411, %r1406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r1413, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r442, %r1420, %r1415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1422, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r442, %r1429, %r1424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r1431, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r442, %r1438, %r1433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r445, %r1375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r442, %r1372, %r1440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1447, %r445, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1450, %r442, %r1381, %r1447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r445, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r442, %r1390, %r1454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r445, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r442, %r1399, %r1461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r445, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r442, %r1408, %r1468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1475, %r445, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1478, %r442, %r1417, %r1475;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r445, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r442, %r1426, %r1482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r445, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r442, %r1435, %r1489;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1496, %r1497}, {%r486, %r492, %r489, %r495}, {%r1373, %r1443}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1506, %r1507}, {%r486, %r492, %r489, %r495}, {%r1382, %r1450}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1516, %r1517}, {%r486, %r492, %r489, %r495}, {%r1391, %r1457}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1526, %r1527}, {%r486, %r492, %r489, %r495}, {%r1400, %r1464}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1536, %r1537}, {%r486, %r492, %r489, %r495}, {%r1409, %r1471}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1546, %r1547}, {%r486, %r492, %r489, %r495}, {%r1418, %r1478}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1556, %r1557}, {%r486, %r492, %r489, %r495}, {%r1427, %r1485}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1566, %r1567}, {%r486, %r492, %r489, %r495}, {%r1436, %r1492}, {%r1640, %r1640};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3688, %r1640;
	mov.u32 	%r3689, %r1640;
	mov.u32 	%r3690, %r1640;
	mov.u32 	%r3691, %r1640;
	@%p273 bra 	$L__BB0_248;
	bra.uni 	$L__BB0_177;
$L__BB0_248:                            // %oksrem6451
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3688, [%rd7];
	ld.shared.u32 	%r3689, [%rd8];
	ld.shared.u32 	%r3690, [%rd9];
	ld.shared.u32 	%r3691, [%rd10];
$L__BB0_177:                            // %L15701
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1700, %r1697}, {%r504, %r507}, {%r3688}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1709, %r1706}, {%r504, %r507}, {%r3689}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1718, %r1715}, {%r504, %r507}, {%r3690}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1727, %r1724}, {%r504, %r507}, {%r3691}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r556, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r556, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1711, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r1711, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r556, %r1718, %r1713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1720, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r1720, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r556, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r559, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r556, %r1697, %r1729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r559, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r556, %r1706, %r1736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r559, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r556, %r1715, %r1743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r559, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r556, %r1724, %r1750;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1798, %r1801}, {%r600, %r606, %r603, %r609}, {%r1698, %r1732}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1817, %r1820}, {%r600, %r606, %r603, %r609}, {%r1707, %r1739}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1805, %r1809}, {%r600, %r606, %r603, %r609}, {%r1716, %r1746}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1824, %r1828}, {%r600, %r606, %r603, %r609}, {%r1725, %r1753}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1797, %r1798, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r1801, %r1801, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r1805, %r1805, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1804;
	// end inline asm
	mov.u32 	%r1832, 268439552;
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1832, %r1808, %r3687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r1817, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r1820, %r1820, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r1824, %r1824, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r1828, %r1828, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1827, %r3686;
	// end inline asm
	mov.u32 	%r3692, %r1640;
	mov.u32 	%r3693, %r1640;
	mov.u32 	%r3694, %r1640;
	mov.u32 	%r3695, %r1640;
	@%p273 bra 	$L__BB0_249;
	bra.uni 	$L__BB0_178;
$L__BB0_249:                            // %oksrem7056
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3692, [%rd13];
	ld.shared.u32 	%r3693, [%rd14];
	ld.shared.u32 	%r3694, [%rd15];
	ld.shared.u32 	%r3695, [%rd16];
$L__BB0_178:                            // %L16920
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1871, %r1868}, {%r504, %r507}, {%r3692}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1880, %r1877}, {%r504, %r507}, {%r3693}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1889, %r1886}, {%r504, %r507}, {%r3694}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1898, %r1895}, {%r504, %r507}, {%r3695}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1864, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1864, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r556, %r1871, %r1866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1873, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r1873, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r556, %r1880, %r1875;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1882, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1884, %r1882, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r556, %r1889, %r1884;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1891, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1893, %r1891, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r556, %r1898, %r1893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1900, %r559, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1903, %r556, %r1868, %r1900;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r559, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r556, %r1877, %r1907;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1914, %r559, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r556, %r1886, %r1914;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1921, %r559, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1924, %r556, %r1895, %r1921;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1969, %r1972}, {%r600, %r606, %r603, %r609}, {%r1869, %r1903}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1988, %r1991}, {%r600, %r606, %r603, %r609}, {%r1878, %r1910}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1976, %r1980}, {%r600, %r606, %r603, %r609}, {%r1887, %r1917}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1995, %r1999}, {%r600, %r606, %r603, %r609}, {%r1896, %r1924}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1968, %r1969, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r1972, %r1972, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r1976, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r1980, %r1980, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1832, %r1979, %r1812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r1988, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r1991, %r1991, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r1995, %r1995, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1999, %r1999, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r1832, %r1998, %r1831;
	// end inline asm
	mov.u32 	%r3696, %r1640;
	mov.u32 	%r3697, %r1640;
	mov.u32 	%r3698, %r1640;
	mov.u32 	%r3699, %r1640;
	@%p273 bra 	$L__BB0_250;
	bra.uni 	$L__BB0_179;
$L__BB0_250:                            // %oksrem7661
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3696, [%rd17];
	ld.shared.u32 	%r3697, [%rd18];
	ld.shared.u32 	%r3698, [%rd19];
	ld.shared.u32 	%r3699, [%rd20];
$L__BB0_179:                            // %L18139
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2042, %r2039}, {%r504, %r507}, {%r3696}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2051, %r2048}, {%r504, %r507}, {%r3697}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2060, %r2057}, {%r504, %r507}, {%r3698}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2069, %r2066}, {%r504, %r507}, {%r3699}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2035, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2035, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r556, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2044, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r2044, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r556, %r2051, %r2046;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2053, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2055, %r2053, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2058, %r556, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2062, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2064, %r2062, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r556, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r559, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r556, %r2039, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2078, %r559, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r556, %r2048, %r2078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2085, %r559, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r556, %r2057, %r2085;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r559, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r556, %r2066, %r2092;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2140, %r2143}, {%r600, %r606, %r603, %r609}, {%r2040, %r2074}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2159, %r2162}, {%r600, %r606, %r603, %r609}, {%r2049, %r2081}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2147, %r2151}, {%r600, %r606, %r603, %r609}, {%r2058, %r2088}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2166, %r2170}, {%r600, %r606, %r603, %r609}, {%r2067, %r2095}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r2140, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r2143, %r2143, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r2147, %r2147, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r2151, %r2151, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r1832, %r2150, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r2159, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r2162, %r2162, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r2166, %r2166, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r2170, %r2170, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r1832, %r2169, %r2002;
	// end inline asm
	mov.u32 	%r3700, %r1640;
	mov.u32 	%r3701, %r1640;
	mov.u32 	%r3702, %r1640;
	mov.u32 	%r3703, %r1640;
	@%p273 bra 	$L__BB0_251;
	bra.uni 	$L__BB0_180;
$L__BB0_251:                            // %oksrem8266
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3700, [%rd21];
	ld.shared.u32 	%r3701, [%rd22];
	ld.shared.u32 	%r3702, [%rd23];
	ld.shared.u32 	%r3703, [%rd24];
$L__BB0_180:                            // %L19358
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r504, %r507}, {%r3700}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2222, %r2219}, {%r504, %r507}, {%r3701}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2231, %r2228}, {%r504, %r507}, {%r3702}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2240, %r2237}, {%r504, %r507}, {%r3703}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r556, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2215, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r556, %r2222, %r2217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2224, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r2224, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r556, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2233, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2233, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r556, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r559, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r556, %r2210, %r2242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r559, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r556, %r2219, %r2249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r559, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r556, %r2228, %r2256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r559, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r556, %r2237, %r2263;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2311, %r2314}, {%r600, %r606, %r603, %r609}, {%r2211, %r2245}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2330, %r2333}, {%r600, %r606, %r603, %r609}, {%r2220, %r2252}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2318, %r2322}, {%r600, %r606, %r603, %r609}, {%r2229, %r2259}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2337, %r2341}, {%r600, %r606, %r603, %r609}, {%r2238, %r2266}, {%r1640, %r1640};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r2311, %r2311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r2314, %r2314, %r2310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2317, %r2318, %r2318, %r2313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2321, %r2322, %r2322, %r2317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3687, %r1832, %r2321, %r2154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2329, %r2330, %r2330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2332, %r2333, %r2333, %r2329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2336, %r2337, %r2337, %r2332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2340, %r2341, %r2341, %r2336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3686, %r1832, %r2340, %r2173;
	// end inline asm
	add.s32 	%r3684, %r3684, 4;
	setp.eq.s32 	%p283, %r3684, 256;
	@%p283 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_183;
$L__BB0_181:                            // %pass8773
                                        //   in Loop: Header=BB0_176 Depth=2
	@%p88 bra 	$L__BB0_182;
// %bb.252:                             // %pass8798
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2348, %r3685, 147456;
	add.s32 	%r2349, %r119, %r2348;
	cvt.u64.u32 	%rd236, %r2349;
	add.s64 	%rd237, %rd236, %rd11;
	mul.hi.s64 	%rd238, %rd237, 1024819115206086201;
	shr.u64 	%rd239, %rd238, 63;
	shr.s64 	%rd240, %rd238, 22;
	add.s64 	%rd241, %rd240, %rd239;
	setp.lt.s64 	%p285, %rd237, 0;
	mul.lo.s64 	%rd242, %rd241, 75497472;
	setp.ne.s64 	%p286, %rd242, %rd237;
	and.pred  	%p287, %p285, %p286;
	selp.s64 	%rd243, -1, 0, %p287;
	add.s64 	%rd244, %rd241, %rd243;
	mul.lo.s64 	%rd245, %rd244, -75497472;
	add.s64 	%rd246, %rd245, %rd237;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3687;
	add.s32 	%r2350, %r120, %r2348;
	cvt.u64.u32 	%rd249, %r2350;
	add.s64 	%rd250, %rd249, %rd11;
	mul.hi.s64 	%rd251, %rd250, 1024819115206086201;
	shr.u64 	%rd252, %rd251, 63;
	shr.s64 	%rd253, %rd251, 22;
	add.s64 	%rd254, %rd253, %rd252;
	setp.lt.s64 	%p288, %rd250, 0;
	mul.lo.s64 	%rd255, %rd254, 75497472;
	setp.ne.s64 	%p289, %rd255, %rd250;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd256, -1, 0, %p290;
	add.s64 	%rd257, %rd254, %rd256;
	mul.lo.s64 	%rd258, %rd257, -75497472;
	add.s64 	%rd259, %rd258, %rd250;
	shl.b64 	%rd260, %rd259, 2;
	add.s64 	%rd261, %rd4, %rd260;
	st.global.u32 	[%rd261], %r3686;
	bra.uni 	$L__BB0_182;
$L__BB0_184:                            // %L19916.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	mov.u32 	%r3708, 12;
	bra.uni 	$L__BB0_185;
$L__BB0_191:                            // %L25738
                                        //   in Loop: Header=BB0_185 Depth=2
	add.s32 	%r3685, %r3685, 1;
	mov.u32 	%r3684, 0;
	mov.u32 	%r3686, %r3684;
	mov.u32 	%r3687, %r3684;
$L__BB0_192:                            // %L25739
                                        //   in Loop: Header=BB0_185 Depth=2
	bar.sync 	0;
	add.s32 	%r3708, %r3708, -4;
	setp.ne.s32 	%p310, %r3708, -12;
	@%p310 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_193;
$L__BB0_185:                            // %L19916
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p293, %r3708, 12;
	selp.b32 	%r2890, %r3659, 0, %p293;
	setp.eq.s32 	%p294, %r3708, 8;
	selp.b32 	%r2891, %r3663, %r2890, %p294;
	setp.eq.s32 	%p295, %r3708, 4;
	selp.b32 	%r2892, %r3667, %r2891, %p295;
	setp.eq.s32 	%p296, %r3708, 0;
	selp.b32 	%r2893, %r3671, %r2892, %p296;
	setp.eq.s32 	%p297, %r3708, -4;
	selp.b32 	%r2894, %r3675, %r2893, %p297;
	setp.eq.s32 	%p298, %r3708, -8;
	selp.b32 	%r2895, %r3679, %r2894, %p298;
	selp.b32 	%r2896, %r3660, 0, %p293;
	selp.b32 	%r2897, %r3664, %r2896, %p294;
	selp.b32 	%r2898, %r3668, %r2897, %p295;
	selp.b32 	%r2899, %r3672, %r2898, %p296;
	selp.b32 	%r2900, %r3676, %r2899, %p297;
	selp.b32 	%r2901, %r3680, %r2900, %p298;
	selp.b32 	%r2902, %r3661, 0, %p293;
	selp.b32 	%r2903, %r3665, %r2902, %p294;
	selp.b32 	%r2904, %r3669, %r2903, %p295;
	selp.b32 	%r2905, %r3673, %r2904, %p296;
	selp.b32 	%r2906, %r3677, %r2905, %p297;
	selp.b32 	%r2907, %r3681, %r2906, %p298;
	selp.b32 	%r2908, %r3662, 0, %p293;
	selp.b32 	%r2909, %r3666, %r2908, %p294;
	selp.b32 	%r2910, %r3670, %r2909, %p295;
	selp.b32 	%r2911, %r3674, %r2910, %p296;
	selp.b32 	%r2912, %r3678, %r2911, %p297;
	selp.b32 	%r2913, %r3682, %r2912, %p298;
	// begin inline asm
	mov.b32 %r2380, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2391, {%rs178, %rs178};
	// end inline asm
	shr.u32 	%r2914, %r2895, 8;
	xor.b32  	%r2390, %r2914, 8947848;
	// begin inline asm
	lop3.b32 %r2377, %r1245, %r2390, %r2380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2381, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2380, %r2381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2385, %r2377, %r2382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2388, %r1256, %r2390, %r2391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2392, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2391, %r2392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2396, %r2388, %r2393;
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2437, {%rs178, %rs178};
	// end inline asm
	shr.u32 	%r2915, %r2901, 8;
	xor.b32  	%r2436, %r2915, 8947848;
	// begin inline asm
	lop3.b32 %r2423, %r1245, %r2436, %r2426, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2427, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2428, %r2426, %r2427;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2431, %r2423, %r2428;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2434, %r1256, %r2436, %r2437, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2439, %r2437, %r2438;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2442, %r2434, %r2439;
	// end inline asm
	// begin inline asm
	mov.b32 %r2472, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2483, {%rs178, %rs178};
	// end inline asm
	shr.u32 	%r2916, %r2907, 8;
	xor.b32  	%r2482, %r2916, 8947848;
	// begin inline asm
	lop3.b32 %r2469, %r1245, %r2482, %r2472, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2474, %r2472, %r2473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2477, %r2469, %r2474;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2480, %r1256, %r2482, %r2483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2483, %r2484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2488, %r2480, %r2485;
	// end inline asm
	// begin inline asm
	mov.b32 %r2518, {%rs176, %rs176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2529, {%rs178, %rs178};
	// end inline asm
	shr.u32 	%r2917, %r2913, 8;
	xor.b32  	%r2528, %r2917, 8947848;
	// begin inline asm
	lop3.b32 %r2515, %r1245, %r2528, %r2518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2520, %r2518, %r2519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2523, %r2515, %r2520;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2526, %r1256, %r2528, %r2529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs182, %rs182};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2531, %r2529, %r2530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2534, %r2526, %r2531;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2385;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2537, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2396;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2540, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2431;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2543, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2442;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2546, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2477;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2549, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2488;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2552, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r86;
    mov.b32 {%r2re, %r2im}, %r2523;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2555, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r87;
    mov.b32 {%r2re, %r2im}, %r2534;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2558, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2889, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2624, %r2621}, {%r390, %r393}, {%r2537}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r390, %r393}, {%r2540}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2642, %r2639}, {%r390, %r393}, {%r2543}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2651, %r2648}, {%r390, %r393}, {%r2546}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2660, %r2657}, {%r390, %r393}, {%r2549}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2669, %r2666}, {%r390, %r393}, {%r2552}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2678, %r2675}, {%r390, %r393}, {%r2555}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2687, %r2684}, {%r390, %r393}, {%r2558}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r442, %r2624, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r442, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r442, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r442, %r2651, %r2646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r442, %r2660, %r2655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2667, %r442, %r2669, %r2664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2676, %r442, %r2678, %r2673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r442, %r2687, %r2682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r445, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r442, %r2621, %r2689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r445, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2699, %r442, %r2630, %r2696;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r445, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r442, %r2639, %r2703;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2710, %r445, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2713, %r442, %r2648, %r2710;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r445, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r442, %r2657, %r2717;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2724, %r445, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r442, %r2666, %r2724;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r445, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2734, %r442, %r2675, %r2731;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r445, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r442, %r2684, %r2738;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2745, %r2746}, {%r486, %r492, %r489, %r495}, {%r2622, %r2692}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2755, %r2756}, {%r486, %r492, %r489, %r495}, {%r2631, %r2699}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2765, %r2766}, {%r486, %r492, %r489, %r495}, {%r2640, %r2706}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2775, %r2776}, {%r486, %r492, %r489, %r495}, {%r2649, %r2713}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2785, %r2786}, {%r486, %r492, %r489, %r495}, {%r2658, %r2720}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2795, %r2796}, {%r486, %r492, %r489, %r495}, {%r2667, %r2727}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2805, %r2806}, {%r486, %r492, %r489, %r495}, {%r2676, %r2734}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2815, %r2816}, {%r486, %r492, %r489, %r495}, {%r2685, %r2741}, {%r2889, %r2889};
	// end inline asm
	bar.sync 	0;
	mov.u32 	%r3713, %r2889;
	mov.u32 	%r3714, %r2889;
	mov.u32 	%r3715, %r2889;
	mov.u32 	%r3716, %r2889;
	@%p273 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_186;
$L__BB0_253:                            // %oksrem9102
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3716, [%rd7];
	ld.shared.u32 	%r3715, [%rd8];
	ld.shared.u32 	%r3714, [%rd9];
	ld.shared.u32 	%r3713, [%rd10];
$L__BB0_186:                            // %L21549
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2953, %r2950}, {%r504, %r507}, {%r3716}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2962, %r2959}, {%r504, %r507}, {%r3715}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2971, %r2968}, {%r504, %r507}, {%r3714}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2980, %r2977}, {%r504, %r507}, {%r3713}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2946, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r2946, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r556, %r2953, %r2948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2955, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r2955, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r556, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2964, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2964, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r556, %r2971, %r2966;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2973, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2975, %r2973, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r556, %r2980, %r2975;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2982, %r559, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2985, %r556, %r2950, %r2982;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2989, %r559, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2992, %r556, %r2959, %r2989;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2996, %r559, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2999, %r556, %r2968, %r2996;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3003, %r559, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3006, %r556, %r2977, %r3003;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3051, %r3054}, {%r600, %r606, %r603, %r609}, {%r2951, %r2985}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3070, %r3073}, {%r600, %r606, %r603, %r609}, {%r2960, %r2992}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3058, %r3062}, {%r600, %r606, %r603, %r609}, {%r2969, %r2999}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3077, %r3081}, {%r600, %r606, %r603, %r609}, {%r2978, %r3006}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r3051, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r3054, %r3054, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r3058, %r3058, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r3062, %r3062, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r1832, %r3061, %r3687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3069, %r3070, %r3070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r3073, %r3073, %r3069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r3077, %r3077, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r3081, %r3081, %r3076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r1832, %r3080, %r3686;
	// end inline asm
	mov.u32 	%r3717, %r2889;
	mov.u32 	%r3718, %r2889;
	mov.u32 	%r3719, %r2889;
	mov.u32 	%r3720, %r2889;
	@%p273 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_187;
$L__BB0_254:                            // %oksrem9707
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3720, [%rd13];
	ld.shared.u32 	%r3719, [%rd14];
	ld.shared.u32 	%r3718, [%rd15];
	ld.shared.u32 	%r3717, [%rd16];
$L__BB0_187:                            // %L22768
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3124, %r3121}, {%r504, %r507}, {%r3720}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3133, %r3130}, {%r504, %r507}, {%r3719}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3142, %r3139}, {%r504, %r507}, {%r3718}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3151, %r3148}, {%r504, %r507}, {%r3717}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3117, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3119, %r3117, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r556, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3126, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r556, %r3133, %r3128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3135, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3137, %r3135, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r556, %r3142, %r3137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3144, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3146, %r3144, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r556, %r3151, %r3146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3153, %r559, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3156, %r556, %r3121, %r3153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3160, %r559, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r556, %r3130, %r3160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3167, %r559, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r556, %r3139, %r3167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3174, %r559, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3177, %r556, %r3148, %r3174;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3222, %r3225}, {%r600, %r606, %r603, %r609}, {%r3122, %r3156}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3241, %r3244}, {%r600, %r606, %r603, %r609}, {%r3131, %r3163}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3229, %r3233}, {%r600, %r606, %r603, %r609}, {%r3140, %r3170}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3248, %r3252}, {%r600, %r606, %r603, %r609}, {%r3149, %r3177}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3221, %r3222, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3225, %r3225, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3229, %r3229, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3233, %r3233, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r1832, %r3232, %r3065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3240, %r3241, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3243, %r3244, %r3244, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r3248, %r3248, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3252, %r3252, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r1832, %r3251, %r3084;
	// end inline asm
	mov.u32 	%r3721, %r2889;
	mov.u32 	%r3722, %r2889;
	mov.u32 	%r3723, %r2889;
	mov.u32 	%r3724, %r2889;
	@%p273 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_188;
$L__BB0_255:                            // %oksrem10312
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3724, [%rd17];
	ld.shared.u32 	%r3723, [%rd18];
	ld.shared.u32 	%r3722, [%rd19];
	ld.shared.u32 	%r3721, [%rd20];
$L__BB0_188:                            // %L23987
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3295, %r3292}, {%r504, %r507}, {%r3724}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3304, %r3301}, {%r504, %r507}, {%r3723}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3313, %r3310}, {%r504, %r507}, {%r3722}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3322, %r3319}, {%r504, %r507}, {%r3721}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3288, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3288, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r556, %r3295, %r3290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3297, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3299, %r3297, %r3301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r556, %r3304, %r3299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3306, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3308, %r3306, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r556, %r3313, %r3308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3315, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3317, %r3315, %r3319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r556, %r3322, %r3317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3324, %r559, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r556, %r3292, %r3324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3331, %r559, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r556, %r3301, %r3331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3338, %r559, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3341, %r556, %r3310, %r3338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3345, %r559, %r3322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r556, %r3319, %r3345;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3393, %r3396}, {%r600, %r606, %r603, %r609}, {%r3293, %r3327}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3412, %r3415}, {%r600, %r606, %r603, %r609}, {%r3302, %r3334}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3400, %r3404}, {%r600, %r606, %r603, %r609}, {%r3311, %r3341}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3419, %r3423}, {%r600, %r606, %r603, %r609}, {%r3320, %r3348}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3392, %r3393, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r3396, %r3396, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3399, %r3400, %r3400, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r3404, %r3404, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r1832, %r3403, %r3236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3411, %r3412, %r3412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r3415, %r3415, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3418, %r3419, %r3419, %r3414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r3423, %r3423, %r3418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3426, %r1832, %r3422, %r3255;
	// end inline asm
	mov.u32 	%r3725, %r2889;
	mov.u32 	%r3726, %r2889;
	mov.u32 	%r3727, %r2889;
	mov.u32 	%r3728, %r2889;
	@%p273 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_189;
$L__BB0_256:                            // %oksrem10917
                                        //   in Loop: Header=BB0_185 Depth=2
	ld.shared.u32 	%r3728, [%rd21];
	ld.shared.u32 	%r3727, [%rd22];
	ld.shared.u32 	%r3726, [%rd23];
	ld.shared.u32 	%r3725, [%rd24];
$L__BB0_189:                            // %L25206
                                        //   in Loop: Header=BB0_185 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3466, %r3463}, {%r504, %r507}, {%r3728}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3475, %r3472}, {%r504, %r507}, {%r3727}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3484, %r3481}, {%r504, %r507}, {%r3726}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3493, %r3490}, {%r504, %r507}, {%r3725}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3459, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3461, %r3459, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r556, %r3466, %r3461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3468, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3470, %r3468, %r3472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r556, %r3475, %r3470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3477, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3479, %r3477, %r3481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r556, %r3484, %r3479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3486, %r559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3488, %r3486, %r3490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3491, %r556, %r3493, %r3488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3495, %r559, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r556, %r3463, %r3495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3502, %r559, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r556, %r3472, %r3502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3509, %r559, %r3484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r556, %r3481, %r3509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3516, %r559, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r556, %r3490, %r3516;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3564, %r3567}, {%r600, %r606, %r603, %r609}, {%r3464, %r3498}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3583, %r3586}, {%r600, %r606, %r603, %r609}, {%r3473, %r3505}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3571, %r3575}, {%r600, %r606, %r603, %r609}, {%r3482, %r3512}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3590, %r3594}, {%r600, %r606, %r603, %r609}, {%r3491, %r3519}, {%r2889, %r2889};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3563, %r3564, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r3567, %r3567, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r3571, %r3571, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r3575, %r3575, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3687, %r1832, %r3574, %r3407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3582, %r3583, %r3583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r3586, %r3586, %r3582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3589, %r3590, %r3590, %r3585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r3594, %r3594, %r3589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3686, %r1832, %r3593, %r3426;
	// end inline asm
	add.s32 	%r3684, %r3684, 4;
	setp.eq.s32 	%p302, %r3684, 256;
	@%p302 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_192;
$L__BB0_190:                            // %pass11424
                                        //   in Loop: Header=BB0_185 Depth=2
	@%p88 bra 	$L__BB0_191;
// %bb.257:                             // %pass11449
                                        //   in Loop: Header=BB0_185 Depth=2
	mul.lo.s32 	%r3601, %r3685, 147456;
	add.s32 	%r3602, %r119, %r3601;
	cvt.u64.u32 	%rd262, %r3602;
	add.s64 	%rd263, %rd262, %rd11;
	mul.hi.s64 	%rd264, %rd263, 1024819115206086201;
	shr.u64 	%rd265, %rd264, 63;
	shr.s64 	%rd266, %rd264, 22;
	add.s64 	%rd267, %rd266, %rd265;
	setp.lt.s64 	%p304, %rd263, 0;
	mul.lo.s64 	%rd268, %rd267, 75497472;
	setp.ne.s64 	%p305, %rd268, %rd263;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd269, -1, 0, %p306;
	add.s64 	%rd270, %rd267, %rd269;
	mul.lo.s64 	%rd271, %rd270, -75497472;
	add.s64 	%rd272, %rd271, %rd263;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3687;
	add.s32 	%r3603, %r120, %r3601;
	cvt.u64.u32 	%rd275, %r3603;
	add.s64 	%rd276, %rd275, %rd11;
	mul.hi.s64 	%rd277, %rd276, 1024819115206086201;
	shr.u64 	%rd278, %rd277, 63;
	shr.s64 	%rd279, %rd277, 22;
	add.s64 	%rd280, %rd279, %rd278;
	setp.lt.s64 	%p307, %rd276, 0;
	mul.lo.s64 	%rd281, %rd280, 75497472;
	setp.ne.s64 	%p308, %rd281, %rd276;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd282, -1, 0, %p309;
	add.s64 	%rd283, %rd280, %rd282;
	mul.lo.s64 	%rd284, %rd283, -75497472;
	add.s64 	%rd285, %rd284, %rd276;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd4, %rd286;
	st.global.u32 	[%rd287], %r3686;
	bra.uni 	$L__BB0_191;
$L__BB0_194:                            // %L25774
	mov.u32 	%r3605, 0;
	st.global.u32 	[%rd6], %r3605;
	ret;
$L__BB0_151:                            // %L7484
	mov.u32 	%r3629, 5;
	st.global.u32 	[%rd6], %r3629;
	mov.u64 	%rd334, exception2191;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7644
	mov.u32 	%r3628, 5;
	st.global.u32 	[%rd6], %r3628;
	mov.u64 	%rd332, exception2191;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7804
	mov.u32 	%r3627, 5;
	st.global.u32 	[%rd6], %r3627;
	mov.u64 	%rd330, exception2191;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7964
	mov.u32 	%r3626, 5;
	st.global.u32 	[%rd6], %r3626;
	mov.u64 	%rd328, exception2191;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8124
	mov.u32 	%r3625, 5;
	st.global.u32 	[%rd6], %r3625;
	mov.u64 	%rd326, exception2191;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8284
	mov.u32 	%r3624, 5;
	st.global.u32 	[%rd6], %r3624;
	mov.u64 	%rd324, exception2191;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8444
	mov.u32 	%r3623, 5;
	st.global.u32 	[%rd6], %r3623;
	mov.u64 	%rd322, exception2191;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8604
	mov.u32 	%r3622, 5;
	st.global.u32 	[%rd6], %r3622;
	mov.u64 	%rd320, exception2191;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8764
	mov.u32 	%r3621, 5;
	st.global.u32 	[%rd6], %r3621;
	mov.u64 	%rd318, exception2191;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8924
	mov.u32 	%r3620, 5;
	st.global.u32 	[%rd6], %r3620;
	mov.u64 	%rd316, exception2191;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L9084
	mov.u32 	%r3619, 5;
	st.global.u32 	[%rd6], %r3619;
	mov.u64 	%rd314, exception2191;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9244
	mov.u32 	%r3618, 5;
	st.global.u32 	[%rd6], %r3618;
	mov.u64 	%rd312, exception2191;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9404
	mov.u32 	%r3617, 5;
	st.global.u32 	[%rd6], %r3617;
	mov.u64 	%rd310, exception2191;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9564
	mov.u32 	%r3616, 5;
	st.global.u32 	[%rd6], %r3616;
	mov.u64 	%rd308, exception2191;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9724
	mov.u32 	%r3615, 5;
	st.global.u32 	[%rd6], %r3615;
	mov.u64 	%rd306, exception2191;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9884
	mov.u32 	%r3614, 5;
	st.global.u32 	[%rd6], %r3614;
	mov.u64 	%rd304, exception2191;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L10044
	mov.u32 	%r3613, 5;
	st.global.u32 	[%rd6], %r3613;
	mov.u64 	%rd302, exception2191;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10204
	mov.u32 	%r3612, 5;
	st.global.u32 	[%rd6], %r3612;
	mov.u64 	%rd300, exception2191;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10364
	mov.u32 	%r3611, 5;
	st.global.u32 	[%rd6], %r3611;
	mov.u64 	%rd298, exception2191;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10524
	mov.u32 	%r3610, 5;
	st.global.u32 	[%rd6], %r3610;
	mov.u64 	%rd296, exception2191;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10684
	mov.u32 	%r3609, 5;
	st.global.u32 	[%rd6], %r3609;
	mov.u64 	%rd294, exception2191;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10870
	mov.u32 	%r3608, 5;
	st.global.u32 	[%rd6], %r3608;
	mov.u64 	%rd292, exception2191;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L11030
	mov.u32 	%r3607, 5;
	st.global.u32 	[%rd6], %r3607;
	mov.u64 	%rd290, exception2191;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11190
	mov.u32 	%r3606, 5;
	st.global.u32 	[%rd6], %r3606;
	mov.u64 	%rd288, exception2191;
	cvta.global.u64 	%rd289, %rd288;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd289;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3631, 2;
	st.global.u32 	[%rd6], %r3631;
	mov.u64 	%rd338, exception2191;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3630, 3;
	st.global.u32 	[%rd6], %r3630;
	mov.u64 	%rd336, exception2191;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd31, exception12203;
	cvta.global.u64 	%rd32, %rd31;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd32;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1149
	add.u64 	%rd30, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r2, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r82};
	st.local.u32 	[%rd5+16], %r83;
	mov.u64 	%rd36, __unnamed_1;
	cvta.global.u64 	%rd37, %rd36;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd37;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd30;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r620, [retval0+0];
	} // callseq 61
	mov.u32 	%r622, 4;
	st.global.u32 	[%rd6], %r622;
	mov.u64 	%rd39, exception2191;
	cvta.global.u64 	%rd40, %rd39;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd40;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd25;
	st.param.b32 	[param0+8], %r358;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
